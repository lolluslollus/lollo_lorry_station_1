local laneutil = require "laneutil"

--Begin Generated
local generatedData = {
	["lanes_terminal"] = {
		curves = {
			-- ["cargo_path_rep_cargo"] = {
			-- 	{ { 10.00000, -5.00000, 0.34450 }, { 10.00000, 5.00000, 0.34450 }, },
			-- },
			-- ["cargo_path_rep_cargo2"] = {
			-- 	{ { 5.00000, -5.00000, 0.34450 }, { 5.00000, 5.00000, 0.34450 }, },
            -- },
            ["cargo_path_rep_cargo3"] = {
				{ { -4.00000, -5.00000, 0.34450 }, { -4.00000, 5.00000, 0.34450 }, },
			},
			["cargo_path_rep_cargo4"] = {
				{ { 4.00000, -5.00000, 0.34450 }, { 4.00000, 5.00000, 0.34450 }, },
			},
		},
	},
}
--End Generated

function data()
    return {
        boundingInfo = {
            bbMax = { 3.840000629425, 2.1260833740234, 3.2567188739777, },
            bbMin = { -3.4699983596802, -1.5046007633209, -0.29989165067673, },
        },
        collider = {
            params = {
                -- halfExtents = { 3.6549994945526, 1.8153420686722, 1.7783052921295, },
                -- halfExtents = { 0.1, 0.1, 0.1, },
                halfExtents = { 0.0, 0.0, 0.0, },
            },
            transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },
            type = "BOX",
        },
        lods = {
            {
                node = {
                    children = {
                        {
                            materials = { "station/rail/cargo/cargo_station_borders_1.mtl", "station/rail/cargo/cargo_station_borders_2.mtl", "station/rail/cargo/cargo_station_windows_and_doors_2.mtl", "station/rail/cargo/cargo_station_roof_2.mtl", },
                            mesh = "station/road/small_cargo/small_street_platform_lod0.msh",
                            name = "small_street_platform",
                            transf = { 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },
                        },
                        -- {
                        --     materials = { "station/rail/cargo/cargo_station_borders_1.mtl", "station/rail/cargo/cargo_station_borders_2.mtl", "station/rail/cargo/cargo_station_windows_and_doors_2.mtl", "station/rail/cargo/cargo_station_roof_2.mtl", },
                        --     mesh = "station/road/small_cargo/small_street_platform_lod0.msh",
                        --     name = "small_street_platform",
                        --     transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },
                        -- },
                        {
                            materials = { "station/rail/cargo/cargo_assets_1.mtl", },
                            mesh = "station/rail/asset/cargo_pallet_jack/pallet_jack_lod0.msh",
                            name = "pallet_jack",
                            transf = { 0.97029572725296, 0.24192188680172, 0, 0, -0.24192188680172, 0.97029572725296, 0, 0, 0, 0, 1, 0, -2.075092792511, 1.1254241466522, 0, 1, },
                        },
                        {
                            materials = { "asset/industry/crates_mix_1.mtl", },
                            mesh = "asset/industry/pallet_01/pallet_01_lod0.msh",
                            name = "pallet_01",
                            transf = { 1, 0, 0, 0, 0, 0.3387379348278, 0.94088071584702, 0, 0, -0.94088071584702, 0.3387379348278, 0, 1.9544242620468, 1.8165782690048, 0.53996938467026, 1, },
                        },
                    },
                    name = "RootNode",
                    transf = { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, },
                },
                static = false,
                visibleFrom = 0,
                visibleTo = 1000,
            },
        },
        metadata = {
            transportNetworkProvider = {
                laneLists = {
                    laneutil.createLanes(
                        generatedData["lanes_terminal"], -- curves
                        { "CARGO" }, -- transport means
                        20, -- max speed
                        4, -- lane width
                        true -- linkable
                    ),
                },
                runways = { },
                terminals = {
                    {
                        order = 0,
                        personEdges = { 0, 1 },
                        personNodes = { 0, 1, 2, 3 },
                        -- vehicleNode = -1, -- 0,
                    },
                },
            },
        },
        -- skipCollision = true,
        -- skipCollisionCheck = true,
        version = 1
    }
    end
    