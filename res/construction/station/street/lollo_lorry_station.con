local vec3 = require "vec3"
local transf = require "transf"
local constructionutil = require "constructionutil"
local paramsutil = require "paramsutil"
local colliderutil = require "colliderutil"
local arrayUtils = require('lollo_lorry_station/arrayUtils')
local _modConstants = require('lollo_lorry_station/constants')
local edgeUtils = require('lollo_lorry_station/edgeHelpers')
local debugger = require('debugger')
local inspect = require('lollo_lorry_station/inspect')
local luadump = require('lollo_lorry_station/luadump')
local _idTransf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}

local _constants = arrayUtils.addProps(
	{
		cargoAreaSpacing = {5, 5, 5, 5},
		-- the smaller these guys, the closer to the road I can fill a slot without it turning red.
		-- negative values don't matter, the api takes up the abs value
		-- cargoPathSpacing = {0.1, 0.1, 0.1, 0.1},
		cargoPathSpacing = {0.0, 0.0, 0.0, 0.0},
		idBases = { -- LOLLO NOTE keep this sorted descending
			areaSlotIdBase = 120000,
			pathSlotIdBase = 110000,
		},
		idFactorY = 100
	},
	_modConstants
)

function data()
	return {
		type = "STREET_STATION_CARGO",
		-- type = "STREET_STATION",
		-- type = 'STREET_CONSTRUCTION',
		description = {
			name = _("Lollo lorry station construction"),
			description = _("Lollo lorry station construction."),
		},
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		params = {
			{
				key = 'lockLayoutCentre',
				name = _('Lock curve'),
				tooltip = _('Lock a curve to keep its shape pretty and prevent other roads merging in. Unlock it to treat it like ordinary roads. You cannot relock an unlocked curve.'),
				values = {
					_('No'),
					_('Yes')
				},
				defaultIndex = 0
			},
		},
		-- hasCargoPlatform = true, -- useless
		-- streetTerminal = { -- useless
		-- 	cargo = true,
		-- },
		-- constructionTemplates = makeConstructionTemplates(),
		order = 5005,
		-- createTemplateFn = function(params)
		-- 	local result = {}
		-- 	-- local cargo = params.type == 1
		-- 	local cargo = params.templateIndex >= 3
		
		-- 	local length = params.year < 1950 and params.length or params.length2
		
		-- 	local MangleId = function(coords)
		-- 		return 200000 * (coords[2] + 100) + 100 * (coords[1] + 100) + coords[3]
		-- 	end
		-- 	local module = cargo and "station/street/cargo_platform.module" or "station/street/passenger_platform.module"
			
		-- 	for i = -1, 0 - params.platL, -1 do
		-- 		for j = 0, length do
		-- 			result[MangleId({i, j - math.floor(length / 2), cargo and 1 or 0})] = module
		-- 		end
		-- 	end
		-- 	for i = 0, params.platR - 1 do
		-- 		for j = 0, length do
		-- 			result[MangleId({i, j - math.floor(length / 2), cargo and 1 or 0})] = module
		-- 		end
		-- 	end
		-- 	result[MangleId({55, 0, 3})] = "station/street/entrance_exit.module"
			
		-- 	return result
		-- end,
		skipCollision = true,
		updateFn = function(params)
			local result = { cost = 1000 }
			print('LOLLO params = ')
			-- luadump(true)(params)
			-- debugger()
			
			result.colliders = {}
			result.groundFaces = {}
			result.terrainAlignmentLists = {}

			-- local cargoSpacing = {5, 5, 5, 5}
			-- local passengerSpacing = {2.5, 2.5, 5, 5}
			
			-- local maxWidth = 10
			-- local maxHeight = 10
			
			-- local centerSize = 20
			-- local trackSize = 5
			-- local passengerPlatformSize = 5
			-- local cargoPlatformSize = 10
			
			-- result.slots = {}
			result.models = {
				{
					id = 'lollo_models/lollo_mark.mdl',
					skipCollision = true,
					transf = _idTransf
				}
			}
			result.edgeLists = {
				{
					type = 'STREET',
					params = {
						busLaneType = 'YES', -- does not pull, neither do hasBusLane and busLane, with true or false
						busLane = 'YES',
						hasBusType = 'YES',
						hasBus = true,
						skipCollision = true,
						--skipCollisionCheck = true,
						type = 'standard/country_medium_new.lua',
						tramTrackType = 'NO' -- tramTrackType
					},
					edges = {
						{ { -10, -10, 0 }, { 0, 1, 0 } },
						{ { -10, -1, 0 }, { 0, 1, 0 } },
						-- { { -10, 0, 0 }, { 0, 1, 0 } },
					},
					freeNodes = {0},
					snapNodes = {0}
					--					tag2nodes = {},
				},
				{
					type = 'STREET',
					params = {
						skipCollision = true,
						--skipCollisionCheck = true,
						type = 'standard/country_medium_new.lua',
						tramTrackType = 'NO' -- tramTrackType
					},
					edges = {
						{ { -10, 1, 0 }, { 0, 1, 0 } },
						-- { { -10, 0, 0 }, { 0, 1, 0 } }, -- LOLLO TODO if the edges touch the vehicle node, it dumps
						{ { -10, 10, 0 }, { 0, 1, 0 } },
					},
					freeNodes = {1},
					snapNodes = {1}
					--					tag2nodes = {},
				},
			}
			-- result.slotConfig = {
			-- 	street_terminal_entrance_exit = {
			-- 		maxModules = -1,
			-- 		message = "",
			-- 		skipCollisionCheck = true,
			-- 	},
			-- 	street_terminal_exit = {
			-- 		maxModules = -1,
			-- 		message = "",
			-- 		skipCollisionCheck = true,
			-- 	},
			-- 	street_terminal_entrance = {
			-- 		maxModules = -1,
			-- 		message = "",
			-- 		skipCollisionCheck = true,
			-- 	},
			-- }

			-- result.MangleId = function(coords)
			-- 	return 200000 * (coords[2] + 100) + 100 * (coords[1] + 100) + coords[3]
			-- end

			result.MangleId = function(x, y, baseId)
				return baseId + _constants.idFactorY * y + x
			end

			-- result.DemangleId = function(slotId)
			-- 	local rem = slotId % 100
			-- 	local variant = rem
			-- 	slotId = (slotId - rem) / 100
			-- 	rem = slotId % 2000
			-- 	local coordI = rem - 100
			-- 	slotId = (slotId - rem) / 2000
			-- 	return coordI, slotId - 100, variant
			-- end

			result.DemangleId = function(slotId)
				-- debugger()
				local function _getIdBase(slotId)
					local baseId = 0
					for k, v in pairs(_constants.idBases) do
						if slotId >= v then
							baseId = v
							break
						end
					end

					return baseId > 0 and baseId or false
				end

				local baseId = _getIdBase(slotId)
				if not baseId then return false, false, false end

				local y = math.floor((slotId - baseId) / _constants.idFactorY)
				local x = math.floor((slotId - baseId - y * _constants.idFactorY))

				return x, y, baseId
			end

			result.slots = {}
			result.terminalGroups = {}
			result.stations = {}

			local addModel = function(name, transf, tag)
				table.insert(result.models, {
					id = name,
					transf = transf,
					tag = tag
				})
			end

			-- local addSlot = function()
			-- 	table.insert(result.slots, {
			-- 		id = result.MangleId({coordI, coordJ, 0}),
			-- 		transf = transf.transl(vec3.new(passXPos, coordJ * 10, .0)),
			-- 		-- type = "street_terminal_passenger",
			-- 		type = "lollo_street_terminal_cargo_area",
			-- 		spacing = passengerSpacing
			-- 	})
			-- end

			local addCargoAreaSlot = function(x, y, baseId)
				table.insert(result.slots, {
					id = result.MangleId(x - _constants.xMin, y - _constants.yMin, baseId),
					transf = transf.transl(vec3.new(x * _constants.xTransfFactor, y * _constants.yTransfFactor, 0.0)),
					-- type = "street_terminal_passenger",
					type = "lollo_street_terminal_cargo_area",
					spacing = _constants.cargoAreaSpacing
				})
			end

			local addCargoPathSlot = function(x, y, baseId)
				table.insert(result.slots, {
					id = result.MangleId(x - _constants.xMin, y - _constants.yMin, baseId),
					transf = transf.transl(vec3.new(x * _constants.xTransfFactor, y * _constants.yTransfFactor, 0.0)),
					-- type = "street_terminal_passenger",
					type = "lollo_street_terminal_cargo_path",
					spacing = _constants.cargoPathSpacing
				})
			end

			-- add cargo area slots
			for x = _constants.xMin, _constants.xMax do
				for y = _constants.yMin, _constants.yMax do
					addCargoAreaSlot(x, y, _constants.idBases.areaSlotIdBase)
				end
			end

			-- add cargo path slots
			-- no access to api or interface, I must work with the params.

			if type(params.position) == 'table' then
				-- print('LOLLO params.position = ')
				-- luadump(true)(params.position)
				-- print(inspect(params.position))

				for x = _constants.xMin, _constants.xMax do
					for y = _constants.yMin, _constants.yMax do
						if params.streetEdges
						and params.streetEdges[edgeUtils.getXKey(x)]
						and params.streetEdges[edgeUtils.getXKey(x)][edgeUtils.getYKey(y)] then
							addCargoPathSlot(x, y, _constants.idBases.pathSlotIdBase)
						end
					end
				end
			end

			return result
		end,
		upgradeFn = function(_)
			debugger() -- it does not get here when I call it with game.interface.upgradeConstruction()
		-- 	-- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
		-- 	-- If you leave it out, adding and removing tram tracks won't work.
		-- 	-- (Bus lanes don't work anyway.)
		-- 	return {}
		end,
	}
end