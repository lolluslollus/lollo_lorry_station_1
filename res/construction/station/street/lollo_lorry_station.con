local vec3 = require "vec3"
local transf = require "transf"
local constructionutil = require "constructionutil"
local paramsutil = require "paramsutil"
local colliderutil = require "colliderutil"
local arrayUtils = require('lollo_lorry_station/arrayUtils')
local _modConstants = require('lollo_lorry_station/constants')
local edgeUtils = require('lollo_lorry_station/edgeHelpers')
local debugger = require('debugger')
local inspect = require('lollo_lorry_station/inspect')
local luadump = require('lollo_lorry_station/luadump')
local _idTransf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}

local _constants = arrayUtils.addProps(
	{
		cargoAreaSpacing = {0.0, 0.0, 0.0, 0.0}, -- {5, 5, 5, 5},
		-- the smaller these guys, the closer to the road I can fill a slot without it turning red.
		-- negative values don't matter, the api takes up the abs value
		-- lorryBaySpacing = {0.1, 0.1, 0.1, 0.1},
		lorryBaySpacing = {0.0, 0.0, 0.0, 0.0},
		idBases = { -- LOLLO NOTE keep this sorted descending
			areaSlotIdBase = 120000,
			pathSlotIdBase = 110000,
		},
		idFactorY = 100,
	},
	_modConstants
)
local _idBasesSortedDesc = {}
for k, v in pairs(_constants.idBases) do
    table.insert(_idBasesSortedDesc, {id = v, name = k})
end
arrayUtils.sort(_idBasesSortedDesc, 'id', false)

function data()
	return {
		type = "STREET_STATION_CARGO",
		-- type = "STREET_STATION",
		-- type = 'STREET_CONSTRUCTION',
		description = {
			name = _("Lollo lorry station construction"),
			description = _("Lollo lorry station construction."),
		},
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		params = {
			-- {
			-- 	key = 'lockLayoutCentre',
			-- 	name = _('Lock curve'),
			-- 	tooltip = _('Lock a curve to keep its shape pretty and prevent other roads merging in. Unlock it to treat it like ordinary roads. You cannot relock an unlocked curve.'),
			-- 	values = {
			-- 		_('No'),
			-- 		_('Yes')
			-- 	},
			-- 	defaultIndex = 0
			-- },
		},
		-- hasCargoPlatform = true, -- useless
		-- streetTerminal = { -- useless
		-- 	cargo = true,
		-- },
		-- constructionTemplates = makeConstructionTemplates(),
		order = 5005,
		-- createTemplateFn = function(params)
		-- 	local result = {}
		-- 	-- local cargo = params.type == 1
		-- 	local cargo = params.templateIndex >= 3
		
		-- 	local length = params.year < 1950 and params.length or params.length2
		
		-- 	local MangleId = function(coords)
		-- 		return 200000 * (coords[2] + 100) + 100 * (coords[1] + 100) + coords[3]
		-- 	end
		-- 	local module = cargo and "station/street/cargo_platform.module" or "station/street/passenger_platform.module"
			
		-- 	for i = -1, 0 - params.platL, -1 do
		-- 		for j = 0, length do
		-- 			result[MangleId({i, j - math.floor(length / 2), cargo and 1 or 0})] = module
		-- 		end
		-- 	end
		-- 	for i = 0, params.platR - 1 do
		-- 		for j = 0, length do
		-- 			result[MangleId({i, j - math.floor(length / 2), cargo and 1 or 0})] = module
		-- 		end
		-- 	end
		-- 	result[MangleId({55, 0, 3})] = "station/street/entrance_exit.module"
			
		-- 	return result
		-- end,
		skipCollision = true,
		updateFn = function(params)
			local result = { 
				colliders = {},
				coord2terminalInfo = {},
				cost = 1000,
				edgeLists = {},
				groundFaces = {},
				models = {},
				slots = {},
				stations = {},
				terminalGroups = {},
				terrainAlignmentLists = {}
			}
			print('LOLLO params = ')
			luadump(true)(params)
			-- debugger()

			local _occupiedSlots = {}
			local _isSlotOccupied = function(x, y)
				if _occupiedSlots[edgeUtils.getXKey(x)] == nil then return false end
				if _occupiedSlots[edgeUtils.getXKey(x)][edgeUtils.getYKey(y)] then return true end
				return false
			end
			local _setSlotOccupied = function(x, y)
				if _occupiedSlots[edgeUtils.getXKey(x)] == nil then _occupiedSlots[edgeUtils.getXKey(x)] = {} end
				_occupiedSlots[edgeUtils.getXKey(x)][edgeUtils.getYKey(y)] = true
			end

			local _addModel = function(fileName, transf, tag)
				table.insert(result.models, {
					id = fileName,
					tag = tag,
					transf = transf,
				})
			end

			local _addCargoAreaSlot = function(x, y, baseId)
				if _isSlotOccupied(x, y) then return end

				_setSlotOccupied(x, y)
				table.insert(result.slots, {
					id = result.MangleId(x, y, baseId),
					transf = transf.transl(vec3.new(x * _constants.xTransfFactor, y * _constants.yTransfFactor, 0.0)),
					-- type = "street_terminal_passenger",
					type = _constants.cargoAreaModuleType,
					spacing = _constants.cargoAreaSpacing
				})
			end

			local _addLorryBaySlot = function(x, y, baseId)
				if _isSlotOccupied(x, y) then return end

				_setSlotOccupied(x, y)
				table.insert(result.slots, {
					id = result.MangleId(x, y, baseId),
					transf = transf.transl(vec3.new(x * _constants.xTransfFactor, y * _constants.yTransfFactor, 0.0)),
					-- type = "street_terminal_passenger",
					type = _constants.lorryBayModuleType,
					spacing = _constants.lorryBaySpacing
				})
			end

			-- add the lorry bay at 0, 0
			_addModel(_constants.lorryBayModelFileName, _idTransf, _constants.lorryBayTag)
			result.coord2terminalInfo[edgeUtils.getXKey(0)] = {}
			result.coord2terminalInfo[edgeUtils.getXKey(0)][edgeUtils.getYKey(0)] = {
				model = #result.models - 1, -- position with base 0
				terminal = 0 -- always 0, it seems
			}
			_setSlotOccupied(0, 0)

			-- add the streets leading into the station
			result.edgeLists = {
				{
					type = 'STREET',
					params = {
						busLaneType = 'YES', -- does not pull, neither do hasBusLane and busLane, with true or false
						busLane = 'YES',
						hasBusType = 'YES',
						hasBus = true,
						skipCollision = true,
						--skipCollisionCheck = true,
						type = 'standard/country_medium_new.lua',
						tramTrackType = 'NO' -- tramTrackType
					},
					edges = {
						{ { -10, -10, 0 }, { 0, 1, 0 } },
						{ { -10, -1, 0 }, { 0, 1, 0 } },
						-- { { -10, 0, 0 }, { 0, 1, 0 } },
					},
					freeNodes = {0},
					snapNodes = {0}
					--					tag2nodes = {},
				},
				{
					type = 'STREET',
					params = {
						skipCollision = true,
						--skipCollisionCheck = true,
						type = 'standard/country_medium_new.lua',
						tramTrackType = 'NO' -- tramTrackType
					},
					edges = {
						{ { -10, 1, 0 }, { 0, 1, 0 } },
						-- { { -10, 0, 0 }, { 0, 1, 0 } }, -- LOLLO TODO if the edges touch the vehicle node, it dumps
						{ { -10, 10, 0 }, { 0, 1, 0 } },
					},
					freeNodes = {1},
					snapNodes = {1}
					--					tag2nodes = {},
				},
			}

			result.MangleId = function(x, y, baseId)
				return baseId + _constants.idFactorY * (y  - _constants.yMin) + (x  - _constants.xMin)
			end

			result.DemangleId = function(slotId)
				local function _getIdBase(slotId)
					local baseId = 0
					for _, v in pairs(_idBasesSortedDesc) do
						if slotId >= v.id then
							baseId = v.id
							break
						end
					end

					return baseId > 0 and baseId or false
				end

				local baseId = _getIdBase(slotId)
				if not baseId then return false, false, false end

				local y = math.floor((slotId - baseId) / _constants.idFactorY)
				local x = math.floor((slotId - baseId - y * _constants.idFactorY))

				return x + _constants.xMin, y + _constants.yMin, baseId
			end

			-- add cargo area slots
			for x = _constants.xMin, _constants.xMax do
				for y = _constants.yMin, _constants.yMax do
					-- LOLLO TODO I only want to add slots adjacent to a lorry bay or to another cargo area.
					-- to do this, shall I check the models or the params.modules? Check!
					_addCargoAreaSlot(x, y, _constants.idBases.areaSlotIdBase)
				end
			end

			-- add cargo path slots
			-- no access to api or interface, I must work with the params.
--[[ 			if type(params.position) == 'table' then
				-- print('LOLLO params.position = ')
				-- luadump(true)(params.position)
				-- print(inspect(params.position))

				for x = _constants.xMin, _constants.xMax do
					for y = _constants.yMin, _constants.yMax do
						if params.streetEdges
						and params.streetEdges[edgeUtils.getXKey(x)]
						and params.streetEdges[edgeUtils.getXKey(x)][edgeUtils.getYKey(y)] then
							addLorryBaySlot(x, y, _constants.idBases.pathSlotIdBase)
						end
					end
				end
			end ]]

			result.terminateConstructionHook = function()
				-- this fires after the user has added a module
				local station = { terminals = {}, tag = 0 } -- tag = 0 means cargo
				for x = _constants.xMin, _constants.xMax do
					local xGroup = { terminals = {}, tag = x }
					for y = _constants.yMin, _constants.yMax do
						if result.coord2terminalInfo[edgeUtils.getXKey(x)] then
							local terminalInfo = result.coord2terminalInfo[edgeUtils.getXKey(x)][edgeUtils.getYKey(y)]
							if terminalInfo ~= nil then
								print('LOLLO terminalInfo = ')
								luadump(true)(terminalInfo)
								table.insert(xGroup.terminals, { terminalInfo.model, terminalInfo.terminal })
							end
						end
					end
					if #xGroup.terminals > 0 then
						table.insert(result.terminalGroups, xGroup)
						table.insert(station.terminals, #result.terminalGroups - 1)
					end
				end

				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- LOLLO stock result.stations = 
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- LOLLO stock result.terminalGroups = 
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep the m all different tho
				-- 		terminals = {
				-- 		{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 		{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				if #station.terminals > 0 then table.insert(result.stations, station) end
				print('LOLLO result.models = ')
				luadump(true)(result.models)
				print('LOLLO result.stations = ')
				luadump(true)(result.stations)
				print('LOLLO result.terminalGroups = ')
				luadump(true)(result.terminalGroups)
			end
			print('LOLLO lollo_lorry_station result = ')
			luadump(true)(result)

			return result
		end,
		upgradeFn = function(_)
			debugger() -- it does not get here when I call it with game.interface.upgradeConstruction()
		-- 	-- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
		-- 	-- If you leave it out, adding and removing tram tracks won't work.
		-- 	-- (Bus lanes don't work anyway.)
		-- 	return {}
		end,
	}
end