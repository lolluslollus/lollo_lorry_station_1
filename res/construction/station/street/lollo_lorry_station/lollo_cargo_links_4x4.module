local transf = require "transf"
local vec3 = require "vec3"
local constants = require('lollo_lorry_station.constants')
local slotHelpers = require('lollo_lorry_station.slotHelpers')

function data()
	return {
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		cost = {
			price = 24000,
		},
		category = {
			categories = { "cargo", },
		},
		description = {
			name = _("Cargo links, 4 x 4 m"),
			description = _("Links for waiting cargo, 4 x 4 m, collision free. Place them across obstacles to connect separate cargo areas."),
			icon = "ui/construction/lollo_lorry_station/cargo_links_4x4.tga"
		},
		metadata = {
			cargo = true,
		},
		order = {
			value = 8,
		},
		type = constants.cargoLinks4x4ModuleType,
		updateFn = function(result, transform, tag, slotId, addModelFn, params, updateScriptParams)
			local x, y, baseId = slotHelpers.demangleId(slotId)
			if not x or not y or not baseId then return end

			result.models[#result.models + 1] = {
				id = 'lollo_lorry_station/cargo_links_4x4.mdl',
				slotId = slotId,
				transf = transform,
				tag = tag
			}
			result.models[#result.models + 1] = {
				id = 'lollo_lorry_station/cargo_links_4x4_lanes.mdl',
				slotId = slotId,
				transf = transform,
				-- tag = tag -- no tag, so it won't turn yellow when configuring, since it contains lanes
			}

			slotHelpers.updateSlotIdsWithModule(slotId, result)
		end,

		getModelsFn = function()
			return {
				{
					id = 'lollo_lorry_station/cargo_links_enhanced_4x4.mdl',
					transf = transf.transl(vec3.new(0.0, 0.0, 0.0)),
				},
			}
		end
	}
end
