local logger = require('lollo_lorry_station.logger')
local moduleHelpers = require('lollo_lorry_station.moduleHelpers')

function data()
	-- logger.print('old con, params are set =')
	-- logger.debugPrint(moduleHelpers.getParams())
	return {
		type = 'STREET_STATION_CARGO',
		description = {
			name = _("LORRY_STOP_NAME"),
			description = _("LORRY_STOP_DESC"),
		},
		availability = {
			yearFrom = 1925, -- same year as modern streets
			yearTo = 0, -- -1, -- 0
		},
		order = 5005,
		soundConfig = {
			soundSet = { name = "lollo_lorry_bay" }
		},
		autoRemovable = false,
		-- snapping = { -- useless
		-- 	rail = true,
		-- 	road = true,
		-- 	water = false
		-- },
		skipCollision = true, -- we need this to change the street type when reconfiguring
		params = moduleHelpers.getParams(),
		updateFn = function(params, two) -- this is overwritten by the .script file
			return {}
		end,
--[[ 		preProcessFn = function(modules, change, three)
			-- this fires when the user adds or removes a module
			-- print('LOLLO preProcessFn')
			-- print('modules =')
			-- debugPrint(modules)
			-- print('change =')
			-- debugPrint(change)
			-- default behaviour
			if change.added then
				modules[change.slotId] = change.module
			else
				modules[change.slotId] = nil
			end
			-- airport behaviour
			-- if change.added then
			-- 	if change.slotId == landingSlotId + 1 then
			-- 		modules[landingSlotId + 0] = nil
			-- 	elseif change.slotId == landingSlotId + 0 then
			-- 		modules[landingSlotId + 1] = nil
			-- 	elseif change.slotId == landingSlotId + 2 then
			-- 		modules[landingSlotId + 3] = nil
			-- 	elseif change.slotId == landingSlotId + 3 then
			-- 		modules[landingSlotId + 2] = nil
			-- 	end
			-- 	modules[change.slotId] = change.module
			-- else
			-- 	modules[change.slotId] = nil
			-- end
			return modules
        end,
]]
--[[
		-- this can be overwritten by the .script file, it is useless anyway
		upgradeFn = function(one, two) -- this is overwritten by the .script file
			logger.print('lollo_lorry_bay_with_edges.con upgradeFn starting, one =') logger.debugPrint(one)
			logger.print('two =') logger.debugPrint(two)
			return {}
        end,
]]
	}
end
