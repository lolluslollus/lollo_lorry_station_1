local arrayUtils = require('lollo_lorry_station.arrayUtils')
local constants = require('lollo_lorry_station.constants')
local logger  = require('lollo_lorry_station.logger')
local moduleHelpers = require('lollo_lorry_station.moduleHelpers')
local pitchHelpers = require('lollo_lorry_station.pitchHelper')
local slotHelpers = require('lollo_lorry_station.slotHelpers')
local transfUtils = require('lollo_lorry_station.transfUtils')
local transfUtilsUG = require 'transf'
-- local vec3UG = require 'vec3'

function data()
	return {
		updateFn = function(params, two)
			logger.print('updateFn starting, params without state =') logger.debugPrint(arrayUtils.cloneDeepOmittingFields(params, {'state'}))
			-- logger.print('two =') logger.debugPrint(two)
			-- LOLLO NOTE I cannot call the api from here, sigh. UG TODO make it!
			-- LOLLO NOTE when configuring, all elements with some waiting edges inside will light yellow.

			local _modules = params.modules or {}

			local function _getHasBus()
				return params.hasBus == 1
			end
			local function _getTramTrackType()
				return params.tramTrack == 0 and 'NO' or params.tramTrack == 1 and 'YES' or 'ELECTRIC'
			end

			local function _initParams()
				-- this parameter was added later: initialise it
				if params.snapNodes ~= 0 and params.snapNodes ~= 1 and params.snapNodes ~= 2 and params.snapNodes ~= 3 then
					params.snapNodes = 3
				end
				-- initialise this too, to be sure
				if params.direction ~= 0 and params.direction ~= 1 then params.direction = 1 end
				-- and this, to be sure
				if not(params.streetType_) or not(two.globalStreetData[params.streetType_ + 1]) then
					params.streetType_ = moduleHelpers.getDefaultStreetTypeIndexBase0(two.globalStreetData)
					logger.print('params.streetType_ set to') debugPrint(params.streetType_)
				else
					logger.print('params.streetType_ =', params.streetType_)
					logger.print('moduleHelpers.getDefaultStreetTypeIndexBase0(two.globalStreetData) =', moduleHelpers.getDefaultStreetTypeIndexBase0(two.globalStreetData))
				end
				-- force no snap while upgrading to make it easier to change other params
				-- game_script will be set it to snappy once done
				-- if params.upgrade then params.snapNodes = 0 end
				-- it is not always good, better leave it to the user to toggle for maximum effectiveness
			end
			_initParams()

			local _pitchAngle = pitchHelpers.getPitchAngle(params)
			local _pitchTransf = pitchHelpers.getIdTransfPitched(_pitchAngle)
			local _selectedStreetData = two.globalStreetData[params.streetType_ + 1] or two.globalStreetData[1]
			local _streetYOffset = -2 -_selectedStreetData.streetWidth * 0.5
			local _vehicleEdgeYOffset = -2 -_selectedStreetData.rightLaneWidth * 0.5
			local _streetFileName = _selectedStreetData.fileName
			local _halfExtraLength = (params.extraLength or 0.0) * 0.5 * moduleHelpers.getLengthMultiplier()
			local _x0 = 10 -- if this is too short (eg 5) and snap is true, edges will try to snap to themselves while configuring

			local _getEdges = function()
				return params.direction == 0
				and {
						{
							pitchHelpers.getXYZPitched(_pitchAngle, {_x0 + _halfExtraLength, _streetYOffset, 0}),
							{-1, 0, 0}
						},
						{
							pitchHelpers.getXYZPitched(_pitchAngle, {1, _streetYOffset, 0}),
							{-1, 0, 0}
						},
						-- this edge is as long as the main lorry bay collider box
						{
							pitchHelpers.getXYZPitched(_pitchAngle, {1, _streetYOffset, 0}),
							{-1, 0, 0}
						},
						{
							pitchHelpers.getXYZPitched(_pitchAngle, {-1, _streetYOffset, 0}),
							{-1, 0, 0},
						},
						{
							pitchHelpers.getXYZPitched(_pitchAngle, {-1, _streetYOffset, 0}),
							{-1, 0, 0},
						},
						{
							pitchHelpers.getXYZPitched(_pitchAngle, {-_x0 - _halfExtraLength, _streetYOffset, 0}),
							{-1, 0, 0},
						},
					}
				or {
					{
						pitchHelpers.getXYZPitched(_pitchAngle, {-_x0 - _halfExtraLength, _streetYOffset, 0}),
						{1, 0, 0}
					},
					{
						pitchHelpers.getXYZPitched(_pitchAngle, {-1, _streetYOffset, 0}),
						{1, 0, 0}
					},
					-- this edge is as long as the main lorry bay collider box
					{
						pitchHelpers.getXYZPitched(_pitchAngle, {-1, _streetYOffset, 0}),
						{1, 0, 0}
					},
					{
						pitchHelpers.getXYZPitched(_pitchAngle, {1, _streetYOffset, 0}),
						{1, 0, 0},
					},
					{
						pitchHelpers.getXYZPitched(_pitchAngle, {1, _streetYOffset, 0}),
						{1, 0, 0},
					},
					{
						pitchHelpers.getXYZPitched(_pitchAngle, {_x0 + _halfExtraLength, _streetYOffset, 0}),
						{1, 0, 0},
					},
				}
			end

			-- LOLLO NOTE we have no beforeBulldoze event,
			-- and we cannot catch the click on the bulldozer confirm button,
			-- so this is the easy way out
			if _modules[slotHelpers.mangleId(0, 0, constants.idBases.removeAllSlotId)] ~= nil then
				logger.print('removing all')
				return {
					edgeLists = {
						{
							type = 'STREET',
							params = {
								hasBus = _getHasBus(),
								type = _streetFileName,
								tramTrackType = _getTramTrackType()
							},
							edges = _getEdges(),
							freeNodes = { 0, 1, 2, 3, 4, 5 },
							snapNodes = { 0, 5 },
						},
					},
					models = { },
				}
			end

			local _isStoreCargoOnPavement = (params.isStoreCargoOnPavement == 1)
			logger.print('_isStoreCargoOnPavement =', _isStoreCargoOnPavement)

			local _getSnapNodes = function()
				if params.direction == 0 then
					if params.snapNodes == 0 then return {}
					elseif params.snapNodes == 1 then return { 0, }
					elseif params.snapNodes == 2 then return { 5, }
					elseif params.snapNodes == 3 then return { 0, 5, }
					end
				else
					if params.snapNodes == 0 then return {}
					elseif params.snapNodes == 1 then return { 5, }
					elseif params.snapNodes == 2 then return { 0, }
					elseif params.snapNodes == 3 then return { 0, 5, }
					end
				end
				return {}
			end
			local result = {
				colliders = {},
				cost = 1000,
				edgeLists = {
					{
						type = 'STREET',
						params = {
							hasBus = _getHasBus(),
							type = _streetFileName,
							tramTrackType = _getTramTrackType()
						},
						edges = _getEdges(),
						-- freeNodes = params.snapNodes == 0 and { 0, 5 } or {},
                        freeNodes = { 0, 5 },
                        snapNodes = _getSnapNodes(),
						-- tag2nodes = { -- useless
						-- 	['0'] = {0, 1, 2, 3, 4, 5} -- list of base 0 indexes
						-- },
                        -- tag2nodes = {} -- LOLLO TODO see if populating this,
                        -- or merely adding it, allows turning on the collision detection
                        -- without issues when upgrading the road et al.
					},
				},
				groundFaces = {
					moduleHelpers.getGroundFace(
						{
							{-7, -2.5, 0, 1},
							{-7, 2.5, 0, 1},
							{7, 2.5, 0, 1},
							{7, -2.5, 0, 1},
						},
						'shared/asphalt_01.gtex.lua'
					)
				},
				models = {
					{
						id = params.direction == 0 and 'lollo_lorry_station/lorry_bay_vehicle_edge_right.mdl' or 'lollo_lorry_station/lorry_bay_vehicle_edge_left.mdl',
						tag = params.direction == 0 and constants.lorryBayVehicleEdgeRightModelTag or constants.lorryBayVehicleEdgeLeftModelTag,
						transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, _vehicleEdgeYOffset, 0, 1}),
					},
					_isStoreCargoOnPavement and {
						id = 'lollo_lorry_station/lorry_bay_streetside_12x4_lanes.mdl',
						-- no tag, so it won't turn yellow when configuring, since it contains lanes
						tag = constants.modelWithCargoAreaTag, -- custom tag, so the main model won't turn yellow when configuring, which models do when they contain lanes
						transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, constants.anyStreetsideYShift, 0, 1}),
					} or {
						id = 'lollo_lorry_station/lorry_bay_streetside_entrance_12x4_lanes.mdl',
						-- no tag, so it won't turn yellow when configuring, since it contains lanes
						tag = nil, -- custom tag, so the main model won't turn yellow when configuring, which models do when they contain lanes
						transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, constants.anyStreetsideYShift, 0, 1}),
					},
					_isStoreCargoOnPavement and {
						id = 'lollo_lorry_station/lorry_bay_streetside_roof_12x4.mdl',
						tag = constants.lorryBayStreetside12x4ModelTag,
						transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, constants.anyStreetsideYShift, 0, 1},
					} or {
						id = 'lollo_lorry_station/lorry_bay_streetside_entrance_12x4.mdl',
						tag = constants.lorryBayStreetsideEntrance12x4ModelTag,
						transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, constants.anyStreetsideYShift, 0, 1},
					},
					_isStoreCargoOnPavement and {
						id = 'lollo_lorry_station/lorry_bay_streetside_paving_12x4.mdl',
						tag = constants.lorryBayStreetside12x4ModelTag,
						transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, constants.anyStreetsideYShift, 0, 1}),
					} or nil,
				},
				moduleIds_ActuallyThere = {},
				slotConfig = {
					[constants.cargoAreaStreetside12x4ModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					},
					[constants.cargoLinks4x4ModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					},
					[constants.cargoAreaInner4x4ModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					},
					[constants.removeAllModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					},
					[constants.removeModulesModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					},
					-- [constants.storeCargoOnPavementModuleType] = {
					-- 	maxModules = 1,
					-- 	message = nil, --'LOLLO slotConfig message',
					-- 	skipCollisionCheck = true,
					-- },
				},
				slots = {},
				stations = {},
				terminalGroups = {},
				terrainAlignmentLists = { { -- LOLLO NOTE this thing with the empty faces is required , otherwise the game will make its own alignments, with spikes and all on bridges or tunnels.
					type = "EQUAL",
					optional = true,
					faces =  { }
				} },
			}

			local _slotMap = {}
			---initialises result.slots and _slotMap
			local _initSlots = function()
				result.slots = {}
				_slotMap = slotHelpers.getEmptySlotMap()

				-- local _extraLengthGridStepCount = math.ceil(_halfExtraLength / constants.xTransfFactor)
				-- logger.print('_extraLengthGridStepCount = ' .. tostring(_extraLengthGridStepCount))
				local _streetWidthGridStepCount = math.ceil(_selectedStreetData.streetWidth / constants.xTransfFactor)
				logger.print('_streetWidthGridStepCount = ' .. tostring(_streetWidthGridStepCount))
				-- 4x4 inner modules
				-- slotHelpers.trySetSlotOpen(1, constants.xMin, constants.yMin, _slotMap) -- only to see the grid limits when debugging
				-- slotHelpers.trySetSlotOpen(1, constants.xMin, constants.yMax, _slotMap) -- only to see the grid limits when debugging
				-- slotHelpers.trySetSlotOpen(1, constants.xMax, constants.yMax, _slotMap) -- only to see the grid limits when debugging
				-- slotHelpers.trySetSlotOpen(1, constants.xMax, constants.yMin, _slotMap) -- only to see the grid limits when debugging
				for x = constants.xMin, constants.xMax do
					-- bar slots on the opposite pavement if not allowed
					if not(_isStoreCargoOnPavement) then
						slotHelpers.setSlotBarred(1, x, - _streetWidthGridStepCount - 1, _slotMap)
					end
					-- bar slots in the street
					for y = -1, - _streetWidthGridStepCount, -1 do
						slotHelpers.setSlotBarred(1, x, y, _slotMap)
					end
					-- add slots beside the entrance or bar them on the whole pavement
					if _isStoreCargoOnPavement then
						if (x == -2 or x == 2) then
							slotHelpers.trySetSlotOpen(1, x, 0, _slotMap)
						end
					else
						slotHelpers.setSlotBarred(1, x, 0, _slotMap)
					end
					-- add slots behind the entrance
					if x > -2 and x < 2 then
						slotHelpers.trySetSlotOpen(1, x, 1, _slotMap)
					end
				end

				-- 12x4 streetside modules
				if _isStoreCargoOnPavement then
					slotHelpers.trySetSlotOpen(2, -3, 0, _slotMap)
				else
					slotHelpers.setSlotBarred(2, -3, 0, _slotMap)
				end
				for x = -2, 2, 1 do
					slotHelpers.setSlotBarred(2, x, 0, _slotMap)
				end
				if _isStoreCargoOnPavement then
					slotHelpers.trySetSlotOpen(2, 3, 0, _slotMap)
				else
					slotHelpers.setSlotBarred(2, 3, 0, _slotMap)
				end

				-- 12x12 inner modules
				for x = constants.xMin, constants.xMax do
					-- bar slots on the opposite pavement if not allowed
					if not(_isStoreCargoOnPavement) then
						slotHelpers.setSlotBarred(3, x, - _streetWidthGridStepCount - 2, _slotMap)
					end
					-- bar slots in the street
					for y = 0, - _streetWidthGridStepCount - 1, -1 do
						slotHelpers.setSlotBarred(3, x, y, _slotMap)
					end
					-- bar slots touching the pavement if not allowed
					if not(_isStoreCargoOnPavement) then
						slotHelpers.setSlotBarred(3, x, 1, _slotMap)
					end
					-- add slots behind the entrance
					if x > -3 and x < 3 then
						slotHelpers.trySetSlotOpen(3, x, 2, _slotMap)
					end
				end

				-- 4x4 link modules
				slotHelpers.trySetSlotOpen(4, -2, 0, _slotMap)
				slotHelpers.trySetSlotOpen(4, -1, -1, _slotMap)
				slotHelpers.setSlotBarred(4, -1, 0, _slotMap)
				slotHelpers.trySetSlotOpen(4, -1, 1, _slotMap)
				slotHelpers.trySetSlotOpen(4, 0, -1, _slotMap)
				slotHelpers.setSlotBarred(4, 0, 0, _slotMap)
				slotHelpers.trySetSlotOpen(4, 0, 1, _slotMap)
				slotHelpers.trySetSlotOpen(4, 1, -1, _slotMap)
				slotHelpers.setSlotBarred(4, 1, 0, _slotMap)
				slotHelpers.trySetSlotOpen(4, 1, 1, _slotMap)
				slotHelpers.trySetSlotOpen(4, 2, 0, _slotMap)
			end
			---updates _slotMap in place
			---@param moduleIds table<integer>
			local _refreshSlotMap = function(moduleIds)
				logger.print('refreshSlotConfig starting')
				for moduleId, _ in pairs(moduleIds) do
				-- for _, moduleId in pairs(moduleIds) do
					-- logger.print('moduleId = ' .. tostring(moduleId))
					local moduleX, moduleY, moduleBaseId = slotHelpers.demangleId(moduleId)
					if moduleX and moduleY and moduleBaseId then
						if moduleBaseId == constants.idBases.cargoAreaInner4x4SlotId then
							-- add slots for more cargoAreaInner4x4SlotId
							slotHelpers.trySetSlotOpen(1, moduleX - 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX + 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX, moduleY + 1, _slotMap)
							-- add slots for more cargoAreaInner12x12SlotId
							-- left and right
							slotHelpers.trySetSlotOpen(3, moduleX - 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX - 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX - 2, moduleY + 1, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 2, moduleY + 1, _slotMap)
							-- above and below
							slotHelpers.trySetSlotOpen(3, moduleX - 1, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 1, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX - 1, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 1, moduleY + 2, _slotMap)
							-- add slots for more cargoLink4x4SlotId
							slotHelpers.trySetSlotOpen(4, moduleX - 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX + 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX, moduleY + 1, _slotMap)
							-- bar slots for cargoAreaStreetside12x4SlotId
							if moduleY == 0 then
								for x = -1, 1 do
									-- if x ~= 0 then
										slotHelpers.setSlotBarred(2, moduleX + x, moduleY, _slotMap)
									-- end
								end
							end
							-- bar slots for cargoAreaInner12x12SlotId
							for x = -1, 1 do
								for y = -1, 1 do
									-- if x ~= 0 or y ~= 0 then
										slotHelpers.setSlotBarred(3, moduleX + x, moduleY + y, _slotMap)
									-- end
								end
							end
						elseif moduleBaseId == constants.idBases.cargoAreaStreetside12x4SlotId then
							if _isStoreCargoOnPavement and moduleY == 0 then
								-- add slots for more cargoAreaInner4x4SlotId
								slotHelpers.trySetSlotOpen(1, moduleX - 2, moduleY, _slotMap)
								slotHelpers.trySetSlotOpen(1, moduleX - 1, moduleY + 1, _slotMap)
								slotHelpers.trySetSlotOpen(1, moduleX, moduleY + 1, _slotMap)
								slotHelpers.trySetSlotOpen(1, moduleX + 1, moduleY + 1, _slotMap)
								slotHelpers.trySetSlotOpen(1, moduleX + 2, moduleY, _slotMap)
								-- add slots for more cargoAreaStreetside12x4SlotId
								slotHelpers.trySetSlotOpen(2, moduleX - 3, moduleY, _slotMap)
								slotHelpers.trySetSlotOpen(2, moduleX + 3, moduleY, _slotMap)
								-- add slots for more cargoAreaInner12x12SlotId
								for x = -2, 2, 1 do
									slotHelpers.trySetSlotOpen(3, moduleX + x, moduleY + 2, _slotMap)
								end
								-- add slots for more cargoLink4x4SlotId
								slotHelpers.trySetSlotOpen(4, moduleX - 2, moduleY, _slotMap)
								slotHelpers.trySetSlotOpen(4, moduleX - 1, moduleY - 1, _slotMap)
								slotHelpers.trySetSlotOpen(4, moduleX - 1, moduleY + 1, _slotMap)
								slotHelpers.trySetSlotOpen(4, moduleX, moduleY - 1, _slotMap)
								slotHelpers.trySetSlotOpen(4, moduleX, moduleY + 1, _slotMap)
								slotHelpers.trySetSlotOpen(4, moduleX + 1, moduleY - 1, _slotMap)
								slotHelpers.trySetSlotOpen(4, moduleX + 1, moduleY + 1, _slotMap)
								slotHelpers.trySetSlotOpen(4, moduleX + 2, moduleY, _slotMap)
								-- bar slots for cargoAreaInner4x4SlotId
								for x = -1, 1 do
									-- if x ~= 0 then
										slotHelpers.setSlotBarred(1, moduleX + x, moduleY, _slotMap)
									-- end
								end
								-- bar slots for cargoAreaStreetside12x4SlotId
								for x = -2, 2 do
									if x ~= 0 then -- do not bar the current module
										slotHelpers.setSlotBarred(2, moduleX + x, moduleY, _slotMap)
									end
								end
								-- bar slots for cargoAreaInner12x12SlotId
								for x = -2, 2 do
									for y = -1, 1 do
										-- if x ~= 0 or y ~= 0 then
											slotHelpers.setSlotBarred(3, moduleX + x, moduleY + y, _slotMap)
										-- end
									end
								end
								-- bar slots for cargoLink4x4SlotId
								for x = -1, 1 do
									-- if x ~= 0 then
										slotHelpers.setSlotBarred(4, moduleX + x, moduleY, _slotMap)
									-- end
								end
							else
								slotHelpers.setSlotBarred(2, moduleX, moduleY, _slotMap) -- bar the current module
							end
						elseif moduleBaseId == constants.idBases.cargoAreaInner12x12SlotId then
							-- logger.print('LOLLO result.slotXYsNested before reading module 12x12 =') logger.debugPrint(result.slotXYsNested)
							-- add slots for more cargoAreaInner4x4SlotId
							-- left and right
							slotHelpers.trySetSlotOpen(1, moduleX - 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX - 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX - 2, moduleY + 1, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX + 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX + 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX + 2, moduleY + 1, _slotMap)
							-- above and below
							slotHelpers.trySetSlotOpen(1, moduleX - 1, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX + 1, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX - 1, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX + 1, moduleY - 2, _slotMap)
							-- add slots for more cargoAreaInner12x12SlotId
							for xy = -2, 2 do
								slotHelpers.trySetSlotOpen(3, moduleX - 3, moduleY + xy, _slotMap)
								slotHelpers.trySetSlotOpen(3, moduleX + 3, moduleY + xy, _slotMap)
								slotHelpers.trySetSlotOpen(3, moduleX + xy, moduleY - 3, _slotMap)
								slotHelpers.trySetSlotOpen(3, moduleX + xy, moduleY + 3, _slotMap)
							end
							-- add slots for more cargoLink4x4SlotId
							-- left and right
							slotHelpers.trySetSlotOpen(4, moduleX - 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX - 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX - 2, moduleY + 1, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX + 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX + 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX + 2, moduleY + 1, _slotMap)
							-- above and below
							slotHelpers.trySetSlotOpen(4, moduleX - 1, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX + 1, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX - 1, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX + 1, moduleY - 2, _slotMap)
							-- bar slots for cargoAreaInner4x4SlotId
							for x = -1, 1 do
								for y = -1, 1 do
									-- if x ~= 0 or y ~= 0 then
										slotHelpers.setSlotBarred(1, moduleX + x, moduleY + y, _slotMap)
									-- end
								end
							end
							-- bar slots for cargoAreaStreetside12x4SlotId
							if moduleY == 0 then
								for x = -2, 2 do
									for y = -1, 1 do
										-- if x ~= 0 or y ~= 0 then
											slotHelpers.setSlotBarred(2, moduleX + x, moduleY + y, _slotMap)
										-- end
									end
								end
							end
							-- bar slots for cargoAreaInner12x12SlotId
							for x = -2, 2 do
								for y = -2, 2 do
									if x ~= 0 or y ~= 0 then -- do not bar the current module
										slotHelpers.setSlotBarred(3, moduleX + x, moduleY + y, _slotMap)
									end
								end
							end
							-- logger.print('LOLLO result.slotXYsNested after reading module 12x12 =') logger.debugPrint(result.slotXYsNested)
						elseif moduleBaseId == constants.idBases.cargoLink4x4SlotId then
							-- add slots for more cargoAreaInner4x4SlotId
							slotHelpers.trySetSlotOpen(1, moduleX - 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX + 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(1, moduleX, moduleY + 1, _slotMap)
							-- add slots for more cargoAreaInner12x12SlotId
							-- left and right
							slotHelpers.trySetSlotOpen(3, moduleX - 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX - 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX - 2, moduleY + 1, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 2, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 2, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 2, moduleY + 1, _slotMap)
							-- above and below
							slotHelpers.trySetSlotOpen(3, moduleX - 1, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 1, moduleY + 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX - 1, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX, moduleY - 2, _slotMap)
							slotHelpers.trySetSlotOpen(3, moduleX + 1, moduleY - 2, _slotMap)
							-- add slots for more cargoLink4x4SlotId
							slotHelpers.trySetSlotOpen(4, moduleX - 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX + 1, moduleY, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX, moduleY - 1, _slotMap)
							slotHelpers.trySetSlotOpen(4, moduleX, moduleY + 1, _slotMap)
							-- bar slots for cargoAreaStreetside12x4SlotId
							if moduleY == 0 then
								for x = -1, 1 do
									-- if x ~= 0 then
										slotHelpers.setSlotBarred(2, moduleX + x, moduleY, _slotMap)
									-- end
								end
							end
							-- bar slots for cargoAreaInner12x12SlotId
							for x = -1, 1 do
								for y = -1, 1 do
									-- if x ~= 0 or y ~= 0 then
										slotHelpers.setSlotBarred(3, moduleX + x, moduleY + y, _slotMap)
									-- end
								end
							end
						end
					end
				end
			end
			---updates result.slots
			local _finaliseSlots = function()
				-- add removeAll
				table.insert(result.slots, {
					-- height = 1,
					id = slotHelpers.mangleId(0, 0, constants.idBases.removeAllSlotId),
					-- shape 0 1 2 3
					shape  = 1,
					spacing = constants.removerSpacing,
					-- transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3UG.new(0, constants.anyInnerYShift, 1.0))),
					transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, constants.anyInnerYShift, 1, 1}),
					type = constants.removeAllModuleType,
				})
				-- add removeModules
				table.insert(result.slots, {
					-- height = 1,
					id = slotHelpers.mangleId(0, 0, constants.idBases.removeModulesSlotId),
					-- shape 0 1 2 3
					shape  = 1,
					spacing = constants.removerSpacing,
					-- transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3UG.new(0, constants.anyInnerYShift, 2.0))),
					transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, constants.anyInnerYShift, 2, 1}),
					type = constants.removeModulesModuleType,
				})
				-- add dummy so you will never need to force terminateConstructionHook()
				table.insert(result.slots, {
					-- height = 1,
					id = slotHelpers.mangleId(0, 0, constants.idBases.dummySlotId),
					-- shape 0 1 2 3
					shape  = 1,
					spacing = { 1, 1, 0, 1},
					-- transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3UG.new(0, constants.anyInnerYShift, 0.0))),
					transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, constants.anyInnerYShift, 0, 1}),
					type = constants.dummyModuleType,
				})
			end
			---adds slots to result.slots, basing on slotMap
			local _addSlotsFromMap = function()
				-- in the following, v.x and v.y are strings. The products work thanks to a LUA under-the-hood conversion
				local _flatSlotMap = slotHelpers.getFlatSlotMap(_slotMap)
				for _, v in pairs(_flatSlotMap[2]) do
					-- logger.print('### LOLLO v.y =', v.y, 'its type =', type(v.y))
					if slotHelpers.isSlotOpen(2, v.x, v.y, _slotMap) then
						local _slotId = slotHelpers.mangleId(v.x, v.y, constants.idBases.cargoAreaStreetside12x4SlotId)
						local _transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyStreetsideYShift, 0, 1}
						table.insert(result.slots, {
							-- height = 1,
							id = _slotId,
							-- shape 0 1 2 3
							spacing = constants.anyStreetsideSpacing,
							-- transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3UG.new(v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyStreetsideYShift, 0.0))),
							transf = transfUtilsUG.mul(_pitchTransf, _transf),
							type = constants.cargoAreaStreetside12x4ModuleType,
						})
					end
				end

				-- add 12x12 inner cargo area slots
				for _, v in pairs(_flatSlotMap[3]) do
					if slotHelpers.isSlotOpen(3, v.x, v.y, _slotMap) then
						local _slotId = slotHelpers.mangleId(v.x, v.y, constants.idBases.cargoAreaInner12x12SlotId)
						local _transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyInnerYShift, 0, 1}
						table.insert(result.slots, {
							-- height = 1,
							id = _slotId,
							-- shape 0 1 2 3
							spacing = constants.innerSpacing12x12,
							-- transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3UG.new(v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyInnerYShift, 0.0))),
							transf = transfUtilsUG.mul(_pitchTransf, _transf),
							type = constants.cargoAreaInner12x12ModuleType,
						})
					end
				end

				-- add 4x4 inner cargo area slots
				for _, v in pairs(_flatSlotMap[1]) do
					-- logger.print('### LOLLO v.y =', v.y, 'its type =', type(v.y))
					if slotHelpers.isSlotOpen(1, v.x, v.y, _slotMap) then
						local _slotId = slotHelpers.mangleId(v.x, v.y, constants.idBases.cargoAreaInner4x4SlotId)
						local _transf = {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyInnerYShift, 0, 1}
						table.insert(result.slots, {
							-- height = 1,
							id = _slotId,
							-- shape 0 1 2 3
							spacing = constants.innerSpacing4x4,
							-- transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3UG.new(v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyInnerYShift, 0.0))),
							transf = transfUtilsUG.mul(_pitchTransf, _transf),
							type = constants.cargoAreaInner4x4ModuleType,
						})
					end
				end

				-- add 4x4 link slots
				for _, v in pairs(_flatSlotMap[4]) do
					if slotHelpers.isSlotOpen(4, v.x, v.y, _slotMap) then
						if logger.isExtendedLog() then
							-- print('### type(v.x) = ' .. tostring(type(v.x)) .. ', type(v.y) = ' .. tostring(type(v.y)))
							if v.x == '0' or v.x == 0 then
								print('looping, id = ' .. tostring(slotHelpers.mangleId(v.x, v.y, constants.idBases.cargoLink4x4SlotId)))
								print('transf =') debugPrint(transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyInnerYShift, 0, 1}))
							end
						end
						table.insert(result.slots, {
							-- height = 1,
							id = slotHelpers.mangleId(v.x, v.y, constants.idBases.cargoLink4x4SlotId),
							-- shape 0 1 2 3
							spacing = constants.innerSpacing4x4,
							-- transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3UG.new(v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyInnerYShift, 0.0))),
							transf = transfUtilsUG.mul(_pitchTransf, {1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  v.x * constants.xTransfFactor, v.y * constants.yTransfFactor + constants.anyInnerYShift, 0, 1}),
							type = constants.cargoLinks4x4ModuleType,
						})
					end
				end
			end

			logger.print('AAA #_modules == ' .. tostring(arrayUtils.getCount(_modules)))
			_initSlots()
			_refreshSlotMap(_modules)
			_addSlotsFromMap()
			_finaliseSlots()

			-- -- add storeCargoOnPavement -- this works, but there are cases when it collides, so we do it with the parameter.
			-- table.insert(result.slots, {
			-- 	-- height = 1,
			-- 	id = slotHelpers.mangleId(0, 0, constants.idBases.storeCargoOnPavementSlotId),
			-- 	-- shape 0 1 2 3
			-- 	shape  = 1,
			-- 	-- spacing = constants.innerSpacing12x12,
			-- 	spacing = { 4, 4, 0, 2},
			-- 	transf = transfUtilsUG.mul(_pitchTransf, transfUtilsUG.transl(vec3.new(0, constants.anyInnerYShift, 0.0))),
			-- 	type = constants.storeCargoOnPavementModuleType,
			-- })

			-- join terminals together
			result.terminateConstructionHook = function()
				-- this fires after the user has added a module
				logger.print('LOLLO starting terminateConstructionHook') --logger.print('LOLLO result.models =')
				logger.print('EEE #_modules == ' .. tostring(arrayUtils.getCount(params.modules)))
				-- logger.print('EEE _modules == ') logger.debugPrint(params.modules)

				-- LOLLO NOTE at this point, the various module.updateFn() have gone through the modules,
				-- which are actually there.
				-- when I delete a module A that is required by another module B, the game removes both 
				-- but params.modules() still contains B.
				-- As a consequence, result.slots still contains the slots, which B allows;
				-- but B has gone.
				-- Here, we remove those junk slots.
				-- result.models is fine, because it was updated in the various module.updateFn()
				logger.print('EEE #result.moduleIds_ActuallyThere == ' .. tostring(arrayUtils.getCount(result.moduleIds_ActuallyThere)))
				-- logger.print('EEE result.moduleIds_ActuallyThere =') logger.debugPrint(result.moduleIds_ActuallyThere)
				_initSlots()
				-- logger.print('### _slotMap EEE =') logger.debugPrint(_slotMap[4]['0'])
				_refreshSlotMap(result.moduleIds_ActuallyThere)
				_addSlotsFromMap()
				_finaliseSlots()
				-- logger.print('### _slotMap GGG =') logger.debugPrint(_slotMap[4]['0'])

				-- logger.debugPrint(result.models)
				local allCargoAreaModelIndexesBase0 = slotHelpers.getCargoAreaModelIndexesBase0(result.models)
				local allCargoLinkIndexesBase0 = slotHelpers.getCargoLinksModelIndexesBase0Simple(result.models)
				-- logger.print('LOLLO cargoAreaModelIndexesBase0 =') logger.debugPrint(cargoAreaModelIndexesBase0)
				logger.print('EEE allCargoAreaModelIndexesBase0 =') logger.debugPrint(allCargoAreaModelIndexesBase0)
				-- LOLLO TODO in future, if you add more lorry bays, only take the non-adjacent ones
				local lorryBayModelIndexesBase0 = slotHelpers.getLorryBayModelIndexesBase0(result.models)
				local vehicleEdgeModelIndexesBase0 = slotHelpers.getVehicleEdgeModelIndexesBase0(result.models)
				-- logger.print('LOLLO lorryBayModelIndexesBase0 =') logger.debugPrint(lorryBayModelIndexesBase0)
				-- logger.print('LOLLO vehicleEdgeModelIndexesBase0 =') logger.debugPrint(vehicleEdgeModelIndexesBase0)
				local extraCargoCapacity = moduleHelpers.getStationPoolCapacities(params, result)
				result.stations = {
					{
						pool = { moreCapacity = extraCargoCapacity },
						tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				}
				result.terminalGroups = {}
				local vehicleEdgeModelIndexBase0_Counter = 0
				-- for _, vehicleEdge in pairs(lorryBayModelIndexesBase0) do
				for _, vehicleEdgeModelIndex in pairs(vehicleEdgeModelIndexesBase0) do
					table.insert(
						result.terminalGroups,
						{
							tag = vehicleEdgeModelIndexBase0_Counter,
							terminals = {
								{ vehicleEdgeModelIndex, 0 }
							},
							-- vehicleNodeOverride = 2 -- this lands on the pavement, so you cannot use it UG TODO make it work!
						}
					)

					-- local adjacentCargoAreas = slotUtils.getAdjacentValues(cargoAreaModelIndexesBase0, vehicleEdge.x, vehicleEdge.y)
					-- logger.print('LOLLO adjacentCargoAreas = ') logger.debugPrint(adjacentCargoAreas)
					-- for _, v in pairs(adjacentCargoAreas) do
					-- 	table.insert(result.terminalGroups[#result.terminalGroups].terminals, {v, 0})
					-- end

					for __, modelIndex in pairs(lorryBayModelIndexesBase0) do
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {modelIndex, 0})
					end

					for __, modelIndex in pairs(allCargoAreaModelIndexesBase0) do
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {modelIndex, 0})
					end

					-- LOLLO NOTE the following is required to make the links visible.
					-- Missing this, their lanes will work but their models won't be displayed.
					for __, modelIndex in pairs(allCargoLinkIndexesBase0) do
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {modelIndex, 0})
					end

					table.insert(result.stations[1].terminals, vehicleEdgeModelIndexBase0_Counter)
					vehicleEdgeModelIndexBase0_Counter = vehicleEdgeModelIndexBase0_Counter + 1
				end

				-- for lorryBayCounter = 1, tagCounterBase0 do
				-- 	table.insert(result.stations[1].terminals, lorryBayCounter - 1)
				-- end
				-- avoid dump when configuring
				if #(result.stations[1].terminals) == 0 then
					table.insert(result.stations[1].terminals, 0)
				end

				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- stock result.stations =
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- stock result.terminalGroups =
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep the m all different tho
				-- 		terminals = {
				-- 			{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 			{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				-- logger.print('LOLLO lollo_lorry_station leaving terminateConstructionHook')
				-- logger.print('LOLLO result.models = ') logger.debugPrint(result.models)
				-- logger.print('LOLLO result.stations = ') logger.debugPrint(result.stations)
				-- logger.print('LOLLO result.terminalGroups = ') logger.debugPrint(result.terminalGroups)
			end

			logger.print('CCC #_modules == ' .. tostring(arrayUtils.getCount(_modules)))
			logger.print('CCC #result.slots == ' .. tostring(#result.slots))
			-- logger.print('CCC result.slots == ') logger.debugPrint(result.slots)
			-- force join terminals together if no modules present
			if arrayUtils.getCount(_modules) == 0 then
				logger.warn('forcing terminateConstructionHook()')
				result.terminateConstructionHook()
			end
			-- logger.print('LOLLO lollo_simple_lorry_bay_with_edges leaving updateFn, result = ') logger.debugPrint(result)

			return result
		end,
		-- useless coz it does not fire with street stations
		-- upgradeFn = function(one, two)
		-- 	logger.print('lollo_lorry_bay_with_edges.script upgradeFn starting, one =') logger.debugPrint(one)
		-- 	logger.print('two =') logger.debugPrint(two)
        --     return {}
        -- end,
	}
end
