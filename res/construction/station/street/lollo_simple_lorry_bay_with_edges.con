local arrayUtils = require('lollo_lorry_station/arrayUtils')
local _idTransf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}
local _modConstants = require('lollo_lorry_station/constants')
local slotUtils = require('lollo_lorry_station/slotHelpers')
local transf = require "transf"
local vec3 = require "vec3"


function data()
	local function _getTramTrackType(params)
		return params.tramTrack == 0 and "NO" or params.tramTrack == 1 and "YES" or "ELECTRIC"
		-- return params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
	end

	return {
		type = "STREET_STATION_CARGO",
		-- type = "STREET_STATION",
		-- type = 'STREET_CONSTRUCTION',
		description = {
			name = _("Lollo simple roadside lorry bay with edges"),
			description = _("Lollo simple roadside lorry bay with edges."),
		},
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		params = {
			-- {
			-- 	key = 'lockLayoutCentre',
			-- 	name = _('Lock curve'),
			-- 	tooltip = _('Lock a curve to keep its shape pretty and prevent other roads merging in. Unlock it to treat it like ordinary roads. You cannot relock an unlocked curve.'),
			-- 	values = {
			-- 		_('No'),
			-- 		_('Yes')
			-- 	},
			-- 	defaultIndex = 0
			-- },
		},
		-- hasCargoPlatform = true, -- useless
		-- streetTerminal = { -- useless
		-- 	cargo = true,
		-- },
		order = 5005,

		skipCollision = true,
		updateFn = function(params)
			-- local _demangleId = function(slotId)
			-- 	local function _getIdBase(slotId)
			-- 		local baseId = 0
			-- 		for _, v in pairs(_modConstants.idBasesSortedDesc) do
			-- 			if slotId >= v.id then
			-- 				baseId = v.id
			-- 				break
			-- 			end
			-- 		end

			-- 		return baseId > 0 and baseId or false
			-- 	end

			-- 	local baseId = _getIdBase(slotId)
			-- 	if not baseId then return false, false, false end

			-- 	local y = math.floor((slotId - baseId) / _modConstants.idFactorY)
			-- 	local x = math.floor((slotId - baseId - y * _modConstants.idFactorY))

			-- 	return x + _modConstants.xMin, y + _modConstants.yMin, baseId
			-- end
			-- local _mangleId = function(x, y, baseId)
			-- 	return baseId + _modConstants.idFactorY * (y  - _modConstants.yMin) + (x  - _modConstants.xMin)
			-- end

			local result = {
				colliders = {},
				coord2terminalInfo = {},
				cost = 1000,
				edgeLists = {
					{
						type = 'STREET',
						params = {
							skipCollision = true,
							type = 'standard/country_medium_new.lua',
							tramTrackType = 'NO' --_getTramTrackType(params)
						},
						edges = {
							{
								{-11, -6 + _modConstants.lorryBayYShift, 0},
								{10, 0, 0},
							},
							{
								{-1, -6 + _modConstants.lorryBayYShift, 0},
								{10, 0, 0},
							},
							{
								{-1, -6 + _modConstants.lorryBayYShift, 0},
								{2, 0, 0},
							},
							{
								{1, -6 + _modConstants.lorryBayYShift, 0},
								{2, 0, 0}
							},
							{
								{1, -6 + _modConstants.lorryBayYShift, 0},
								{10, 0, 0}
							},
							{
								{11, -6 + _modConstants.lorryBayYShift, 0},
								{10, 0, 0}
							}
						},
						freeNodes = {0, 5},
						snapNodes = {}
					},
				},
				groundFaces = {},
				models = {
					{
						id = 'lollo_models/lollo_simple_lorry_bay.mdl',
						-- tag = slotUtils.getCargoAreaModelTag(slotId),
						tag = slotUtils.getLorryBayModelTag(slotUtils.mangleId(0, 0, _modConstants.idBases.leftBaySlotIdBase)),
						transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, _modConstants.lorryBayYShift, 0, 1},
					},
				},
				slots = {},
				stations = {},
				terminalGroups = {},
				terrainAlignmentLists = {},
				DemangleId = slotUtils.demangleId,
				MangleId = slotUtils.mangleId,
			}

			print('LOLLO starting lollo_simple_lorry_bay_with_edges.updateFn, params = ')
			debugPrint(arrayUtils.cloneOmittingFields(params, {'state'}))

			local _occupiedSlots = {}
			local _isSlotOccupied = function(x, y)
				return slotUtils.getValueFromNestedTable(_occupiedSlots, x, y) == true
				-- if _occupiedSlots[edgeUtils.getXKey(x)] == nil then return false end
				-- if _occupiedSlots[edgeUtils.getXKey(x)][edgeUtils.getYKey(y)] then return true end
				-- return false
			end
			local _setSlotOccupied = function(x, y)
				slotUtils.setValueInNestedTable(_occupiedSlots, true, x, y)
				-- if _occupiedSlots[edgeUtils.getXKey(x)] == nil then _occupiedSlots[edgeUtils.getXKey(x)] = {} end
				-- _occupiedSlots[edgeUtils.getXKey(x)][edgeUtils.getYKey(y)] = true
			end

			-- bar slots along the road and in its middle
			_setSlotOccupied(0, 0)
			_setSlotOccupied(0, -1)
			_setSlotOccupied(-1, 0)
			_setSlotOccupied(1, 0)

			-- add cargo area slots
			local slotXYs = {
				['-1'] = {
					['0'] = true,
				},
				['0'] = {
					['-1'] = true,
					['0'] = true,
					['1'] = true
				},
				['1'] = {
					['0'] = true,
				}
			}
			if type(params.modules) == 'table' then
				for moduId, _ in pairs(params.modules) do
					local moduleX, moduleY, moduleBaseId = result.DemangleId(moduId)
					if moduleBaseId == _modConstants.idBases.areaSlotIdBase
					or moduleBaseId == _modConstants.idBases.rightBaySlotIdBase
					or moduleBaseId == _modConstants.idBases.leftBaySlotIdBase then
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX, moduleY)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX, moduleY + 1)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX + 1, moduleY)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX, moduleY - 1)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX - 1, moduleY)
					end
				end
			end
			local adjacentXYs = slotUtils.getFlatTable(slotXYs)
			-- print('LOLLO adjacentXYs = ')
			-- debugPrint(adjacentXYs)
			for _, v in pairs(adjacentXYs) do
				if not(_isSlotOccupied(v.x, v.y)) then
					_setSlotOccupied(v.x, v.y)
					table.insert(result.slots, {
						id = result.MangleId(v.x, v.y, _modConstants.idBases.areaSlotIdBase),
						transf = transf.transl(vec3.new(v.x * _modConstants.xTransfFactor, v.y * _modConstants.yTransfFactor, 0.0)),
						-- type = "street_terminal_passenger",
						type = _modConstants.cargoAreaModuleType,
						spacing = _modConstants.cargoAreaSpacing,
						-- height
						-- shape 1 2 3 4
					})
				end
			end

			-- join terminals together
			result.terminateConstructionHook = function(one, two)
				print('LOLLO starting terminateConstructionHook')
				print('LOLLO result.models =')
				debugPrint(result.models)
				-- this fires after the user has added a module
				local station = { terminals = {}, tag = 0 } -- tag = 0 means cargo
				local cargoAreaModelIndexesBase0 = slotUtils.getCargoAreaModelIndexesBase0(result.models)
				print('LOLLO cargoAreaModelIndexesBase0 =')
				debugPrint(cargoAreaModelIndexesBase0)
				-- LOLLO TODO in future, take only non-adjacent lorry bays
				local lorryBayModelIndexesBase0 = slotUtils.getLorryBayModelIndexesBase0(result.models)
				print('LOLLO lorryBayModelIndexesBase0 =')
				debugPrint(lorryBayModelIndexesBase0)

				local tagCounterBase0 = 0
				result.terminalGroups = {}
				for _, bay in pairs(lorryBayModelIndexesBase0) do
					table.insert(
						result.terminalGroups,
						{tag = tagCounterBase0, terminals = { { bay.base0ModelIndex, 0 }}}
					)

					local adjacentCargoAreas = slotUtils.getAdjacentValues(cargoAreaModelIndexesBase0, bay.x, bay.y)
print('LOLLO adjacentCargoAreas = ')
debugPrint(adjacentCargoAreas)
					for _, v in pairs(adjacentCargoAreas) do
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {v, 0})
					end

					tagCounterBase0 = tagCounterBase0 + 1
				end

				result.stations = {
					{
						tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				}
				for lorryBayCounter = 1, tagCounterBase0 do
					table.insert(result.stations[1].terminals, lorryBayCounter - 1)
				end
				-- avoid dump when configuring
				if #(result.stations[1].terminals) == 0 then
					table.insert(result.stations[1].terminals, 0)
				end

				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- LOLLO stock result.stations =
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- LOLLO stock result.terminalGroups =
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep the m all different tho
				-- 		terminals = {
				-- 		{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 		{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				print('LOLLO lollo_lorry_station leaving terminateConstructionHook')
				if #station.terminals > 0 then table.insert(result.stations, station) end
				print('LOLLO result.models = ')
				debugPrint(result.models)
				print('LOLLO result.stations = ')
				debugPrint(result.stations)
				print('LOLLO result.terminalGroups = ')
				debugPrint(result.terminalGroups)
			end
			
			print('LOLLO lollo_simple_lorry_bay_with_edges leaving updateFn, result = ')
			debugPrint(result)

			return result
		end,
		upgradeFn = function(_)
		-- it does not get here when I call it with game.interface.upgradeConstruction()
		-- 	-- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
		-- 	-- If you leave it out, adding and removing tram tracks won't work.
		-- 	-- (Bus lanes don't work anyway.)
			return {}
		end,
	}
end