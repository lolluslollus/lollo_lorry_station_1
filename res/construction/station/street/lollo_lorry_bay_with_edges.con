local _constants = require('lollo_lorry_station/constants')
local slotUtils = require('lollo_lorry_station/slotHelpers')
local transf = require "transf"
local vec3 = require "vec3"

function data()
	return {
		type = 'STREET_STATION_CARGO',
		description = {
			name = _("Lollo roadside lorry bay"),
			description = _("Lollo roadside lorry bay."),
		},
		availability = {
			yearFrom = 1925, -- -1, -- 1925,
			yearTo = 0, -- -1, -- 0
		},
		order = 5005,
		soundConfig = {
			soundSet = { name = "lollo_lorry_bay" }
		},
		autoRemovable = false,
		skipCollision = true,
		params = {
			{
				key = 'isStoreCargoOnPavement',
				name = _('Store cargo on the pavement'),
				tooltip = _('Store some of the cargo on the pavement'),
				values = {
					_('No'),
					_('Yes')
				},
				defaultIndex = 1
			}
		},
		updateFn = function(params, two)
			-- local streetData = two.globalStreetData[params.streetType_ + 1]
			local function _getTramTrackType(params)
				return params.tramTrack == 0 and "NO" or params.tramTrack == 1 and "YES" or "ELECTRIC"
				-- return params.tramTrack and (({'NO', 'YES', 'ELECTRIC'})[params.tramTrack + 1]) or 'NO'
			end
			-- local _streetFileName = 'standard/country_medium_new.lua'
			local _streetFileName = 'standard/country_medium_one_way_new.lua'
			-- LOLLO NOTE I cannot call the api from here, sigh.
			local result = {
				colliders = {},
				coord2terminalInfo = {},
				cost = 1000,
				edgeLists = {
					{
						type = 'STREET',
						params = {
							skipCollision = true,
							type = _streetFileName,
							tramTrackType = 'NO' --_getTramTrackType(params)
						},
						edges = {
							{
								{11, -6 + _constants.anyStreetsideYShift, 0},
								{-10, 0, 0}
							},
							{
								{1, -6 + _constants.anyStreetsideYShift, 0},
								{-10, 0, 0}
							},
						},
						freeNodes = {},
						snapNodes = { 0 },
					},
					{
						type = 'STREET',
						params = {
							type = _streetFileName,
							tramTrackType = 'NO' --_getTramTrackType(params)
						},
						edges = {
							{
								{1, -6 + _constants.anyStreetsideYShift, 0},
								{-2, 0, 0}
							},
							{
								{-1, -6 + _constants.anyStreetsideYShift, 0},
								{-2, 0, 0},
							},
						},
						freeNodes = {},
						snapNodes = {},
					},
					{
						type = 'STREET',
						params = {
							type = _streetFileName,
							tramTrackType = 'NO' --_getTramTrackType(params)
						},
						edges = {
							{
								{-1, -6 + _constants.anyStreetsideYShift, 0},
								{-10, 0, 0},
							},
							{
								{-11, -6 + _constants.anyStreetsideYShift, 0},
								{-10, 0, 0},
							},
						},
						freeNodes = {},
						snapNodes = { 1 }, -- LOLLO NOTE all edge nodes must be non free, to avoid collisions when configuring a finalised station
					},
				},
				groundFaces = {},
				models = {
					{
						id = params.isStoreCargoOnPavement == 1 and _constants.lorryBayStreetside15x5ModelFileName or _constants.lorryBayStreetsideEntrance15x5ModelFileName,
						slotId = slotUtils.mangleId(0, 0, _constants.idBases.rightLorryBaySlotIdBase),
						tag = _constants.lorryBayStreetside15x5ModelTag,
						transf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, _constants.anyStreetsideYShift, 0, 1},
					},
				},
				slotConfig = {
					-- [_constants.cargoAreaInner15x15ModuleType] = {
					-- 	maxModules = -1,
					-- 	message = nil, --'LOLLO slotConfig message',
					-- 	skipCollisionCheck = true,
					-- },
					[_constants.cargoAreaStreetside15x5ModuleType] = {
						maxModules = -1,
						message = nil, --'LOLLO slotConfig message',
						skipCollisionCheck = true,
					}
				},
				slots = {},
				stations = {},
				terminalGroups = {},
				terrainAlignmentLists = {},
				DemangleId = slotUtils.demangleId,
				MangleId = slotUtils.mangleId,
			}

			-- print('LOLLO starting lollo_simple_lorry_bay_with_edges.updateFn, params = ')
			-- debugPrint(arrayUtils.cloneOmittingFields(params, {'state'}))

			-- set default slot locations
			local _slotXYsNested = {
				{ -- slots for 5x5 modules
					-- ['-1'] = {
					-- 	['1'] = true,
					-- },
					-- ['0'] = {
					-- 	['1'] = true,
					-- },
					-- ['1'] = {
					-- 	['1'] = true,
					-- },
				},
				{ -- slots for 15x5 modules
					-- ['-3'] = {
					-- 	['0'] = true,
					-- },
					-- ['3'] = {
					-- 	['0'] = true,
					-- },
				},
				{ -- slots for 15x15 modules
					-- ['0'] = {
					-- 	['2'] = true,
					-- },
				},
			}
			local _isSlotOpen = function(level, x, y)
				return slotUtils.getValueFromNestedTable(_slotXYsNested[level], x, y) == true
			end
			local _setSlotBarred = function(level, x, y)
				slotUtils.setValueInNestedTable(_slotXYsNested[level], false, x, y)
			end
			local _trySetSlotOpen = function(level, x, y)
				if slotUtils.getValueFromNestedTable(_slotXYsNested[level], x, y) == false then return end
				slotUtils.setValueInNestedTable(_slotXYsNested[level], true, x, y)
			end

			-- bar slots for main slot, the one with the vehicle loading bay
			_setSlotBarred(1, -1, -1)
			_setSlotBarred(1, -1, 0)
			_trySetSlotOpen(1, -1, 1)
			_setSlotBarred(1, 0, -1)
			_setSlotBarred(1, 0, 0)
			_trySetSlotOpen(1, 0, 1)
			_setSlotBarred(1, 1, -1)
			_setSlotBarred(1, 1, 0)
			_trySetSlotOpen(1, 1, 1)

			if params.isStoreCargoOnPavement == 1 then
				_trySetSlotOpen(2, -3, 0)
			else
				_setSlotBarred(2, -3, 0)
			end
			_setSlotBarred(2, -2, -1)
			_setSlotBarred(2, -2, 0)
			_setSlotBarred(2, -2, 1)
			_setSlotBarred(2, -1, -1)
			_setSlotBarred(2, -1, 0)
			_setSlotBarred(2, -1, 1)
			_setSlotBarred(2, 0, -1)
			_setSlotBarred(2, 0, 0)
			_setSlotBarred(2, 0, 1)
			_setSlotBarred(2, 1, -1)
			_setSlotBarred(2, 1, 0)
			_setSlotBarred(2, 1, 1)
			_setSlotBarred(2, 2, -1)
			_setSlotBarred(2, 2, 0)
			_setSlotBarred(2, 2, 1)
			if params.isStoreCargoOnPavement == 1 then
				_trySetSlotOpen(2, 3, 0)
			else
				_setSlotBarred(2, 3, 0)
			end

			_setSlotBarred(3, -2, -2)
			_setSlotBarred(3, -2, -1)
			_setSlotBarred(3, -2, 0)
			_setSlotBarred(3, -2, 1)
			_setSlotBarred(3, -1, -2)
			_setSlotBarred(3, -1, -1)
			_setSlotBarred(3, -1, 0)
			_setSlotBarred(3, -1, 1)
			_setSlotBarred(3, 0, -2)
			_setSlotBarred(3, 0, -1)
			_setSlotBarred(3, 0, 0)
			_setSlotBarred(3, 0, 1)
			_trySetSlotOpen(3, 0, 2)
			_setSlotBarred(3, 1, -2)
			_setSlotBarred(3, 1, -1)
			_setSlotBarred(3, 1, 0)
			_setSlotBarred(3, 1, 1)
			_setSlotBarred(3, 2, -2)
			_setSlotBarred(3, 2, -1)
			_setSlotBarred(3, 2, 0)
			_setSlotBarred(3, 2, 1)

			-- print('LOLLO _slotXYsNested before beginning =')
			-- debugPrint(_slotXYsNested)
			-- fill slots on and around modules, if present
			if type(params.modules) == 'table' then
				for moduId, _ in pairs(params.modules) do
					local moduleX, moduleY, moduleBaseId = result.DemangleId(moduId)
					if moduleBaseId == _constants.idBases.cargoAreaInner5x5SlotId then
						_trySetSlotOpen(1, moduleX - 1, moduleY)
						_trySetSlotOpen(1, moduleX + 1, moduleY)
						_trySetSlotOpen(1, moduleX, moduleY - 1)
						_trySetSlotOpen(1, moduleX, moduleY + 1)
						_trySetSlotOpen(3, moduleX - 2, moduleY - 1)
						_trySetSlotOpen(3, moduleX - 2, moduleY)
						_trySetSlotOpen(3, moduleX - 2, moduleY + 1)
						_trySetSlotOpen(3, moduleX + 2, moduleY - 1)
						_trySetSlotOpen(3, moduleX + 2, moduleY)
						_trySetSlotOpen(3, moduleX + 2, moduleY + 1)
						_trySetSlotOpen(3, moduleX - 1, moduleY - 2)
						_trySetSlotOpen(3, moduleX, moduleY - 2)
						_trySetSlotOpen(3, moduleX + 1, moduleY - 2)
						_trySetSlotOpen(3, moduleX - 1, moduleY + 2)
						_trySetSlotOpen(3, moduleX, moduleY + 2)
						_trySetSlotOpen(3, moduleX + 1, moduleY + 2)
					elseif moduleBaseId == _constants.idBases.cargoAreaStreetside15x5SlotId then
						_trySetSlotOpen(1, moduleX - 1, moduleY + 1)
						_trySetSlotOpen(1, moduleX, moduleY + 1)
						_trySetSlotOpen(1, moduleX + 1, moduleY + 1)
						_trySetSlotOpen(2, moduleX - 3, moduleY)
						_trySetSlotOpen(2, moduleX + 3, moduleY)
						-- _trySetSlotOpen(2, moduleX, moduleY)
						_trySetSlotOpen(3, moduleX - 2, moduleY + 2)
						_trySetSlotOpen(3, moduleX - 1, moduleY + 2)
						_trySetSlotOpen(3, moduleX, moduleY + 2)
						_trySetSlotOpen(3, moduleX + 1, moduleY + 2)
						_trySetSlotOpen(3, moduleX + 2, moduleY + 2)
						for i = -1, 1 do
							_setSlotBarred(1, moduleX + i, moduleY)
						end
						for i = -2, 2 do
							if i ~= 0 then
								_setSlotBarred(2, moduleX + i, moduleY)
							end
						end
						for i = -2, 2 do
							for j = -1, 1 do
								_setSlotBarred(3, moduleX + i, moduleY + j)
							end
						end
					elseif moduleBaseId == _constants.idBases.cargoAreaInner15x15SlotId then
						-- print('LOLLO _slotXYsNested before reading module 15x15 =')
						-- debugPrint(_slotXYsNested)
						_trySetSlotOpen(1, moduleX - 2, moduleY - 1)
						_trySetSlotOpen(1, moduleX - 2, moduleY)
						_trySetSlotOpen(1, moduleX - 2, moduleY + 1)
						_trySetSlotOpen(1, moduleX + 2, moduleY - 1)
						_trySetSlotOpen(1, moduleX + 2, moduleY)
						_trySetSlotOpen(1, moduleX + 2, moduleY + 1)
						_trySetSlotOpen(1, moduleX - 1, moduleY - 2)
						_trySetSlotOpen(1, moduleX, moduleY - 2)
						_trySetSlotOpen(1, moduleX + 1, moduleY - 2)
						_trySetSlotOpen(1, moduleX - 1, moduleY + 2)
						_trySetSlotOpen(1, moduleX, moduleY + 2)
						_trySetSlotOpen(1, moduleX + 1, moduleY + 2)
						_trySetSlotOpen(3, moduleX + 3, moduleY)
						_trySetSlotOpen(3, moduleX - 3, moduleY)
						_trySetSlotOpen(3, moduleX, moduleY + 3)
						_trySetSlotOpen(3, moduleX, moduleY - 3)
						for i = -1, 1 do
							for j = -1, 1 do
								_setSlotBarred(1, moduleX + i, moduleY + j)
							end
						end
						for i = -2, 2 do
							for j = -1, 1 do
								_setSlotBarred(2, moduleX + i, moduleY + j)
							end
						end
						for i = -2, 2 do
							for j = -2, 2 do
								if i ~= 0 or j ~= 0 then
									_setSlotBarred(3, moduleX + i, moduleY + j)
								end
							end
						end
						-- print('LOLLO _slotXYsNested after reading module 15x15 =')
						-- debugPrint(_slotXYsNested)
					end
				end
			end
			local _slotXYsFlat = {
				slotUtils.getFlatTable(_slotXYsNested[1]),
				slotUtils.getFlatTable(_slotXYsNested[2]),
				slotUtils.getFlatTable(_slotXYsNested[3]),
			}
			-- print('LOLLO _slotXYsFlat = ')
			-- debugPrint(_slotXYsFlat)

			-- add streetside cargo area slots, only along the road
			if params.isStoreCargoOnPavement == 1 then
				for _, v in pairs(_slotXYsFlat[2]) do
					-- print('LOLLO v.y =', v.y, 'its type =', type(v.y))
					if (v.y == '0' or v.y == 0)
					-- and not(_isSlotBarred(v.x - 1, v.y))
					and _isSlotOpen(2, v.x, v.y)
					-- and not(_isSlotBarred(v.x + 1, v.y))
					then
						table.insert(result.slots, {
							-- height = 1,
							id = result.MangleId(v.x, v.y, _constants.idBases.cargoAreaStreetside15x5SlotId),
							-- shape 1 2 3 4
							spacing = _constants.anyStreetsideSpacing,
							transf = transf.transl(vec3.new(v.x * _constants.xTransfFactor, v.y * _constants.yTransfFactor + _constants.anyStreetsideYShift, 0.0)),
							type = _constants.cargoAreaStreetside15x5ModuleType,
						})
					end
				end
			end

			-- add 15x15 inner cargo area slots
			for _, v in pairs(_slotXYsFlat[3]) do
				if _isSlotOpen(3, v.x, v.y) then
					table.insert(result.slots, {
						-- height = 1,
						id = result.MangleId(v.x, v.y, _constants.idBases.cargoAreaInner15x15SlotId),
						-- shape 1 2 3 4
						spacing = _constants.anyInnerSpacing,
						transf = transf.transl(vec3.new(v.x * _constants.xTransfFactor, v.y * _constants.yTransfFactor + _constants.anyInnerYShift, 0.0)),
						type = _constants.cargoAreaInner15x15ModuleType,
					})
				end
			end

			-- add 5x5 inner cargo area slots
			for _, v in pairs(_slotXYsFlat[1]) do
				if _isSlotOpen(1, v.x, v.y) then
					table.insert(result.slots, {
						-- height = 1,
						id = result.MangleId(v.x, v.y, _constants.idBases.cargoAreaInner5x5SlotId),
						-- shape 1 2 3 4
						spacing = _constants.anyInnerSpacing,
						transf = transf.transl(vec3.new(v.x * _constants.xTransfFactor, v.y * _constants.yTransfFactor + _constants.anyInnerYShift, 0.0)),
						type = _constants.cargoAreaInner5x5ModuleType,
					})
				end
			end

			-- join terminals together
			result.terminateConstructionHook = function(one, two)
				-- this fires after the user has added a module
				-- print('LOLLO starting terminateConstructionHook')
				-- print('LOLLO result.models =')
				-- debugPrint(result.models)
				-- local cargoAreaModelIndexesBase0 = slotUtils.getCargoAreaModelIndexesBase0(result.models)
				local allCargoAreaModelIndexesBase0 = slotUtils.getCargoAreaModelIndexesBase0Simple(result.models)
				-- print('LOLLO cargoAreaModelIndexesBase0 =')
				-- debugPrint(cargoAreaModelIndexesBase0)
				print('LOLLO allCargoAreaModelIndexesBase0 =')
				debugPrint(allCargoAreaModelIndexesBase0)
				-- LOLLO TODO in future, if you add more lorry bays, only take the non-adjacent ones
				local lorryBayModelIndexesBase0 = slotUtils.getLorryBayModelIndexesBase0(result.models)
				-- print('LOLLO lorryBayModelIndexesBase0 =')
				-- debugPrint(lorryBayModelIndexesBase0)

				result.stations = {
					{
						tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				}
				result.terminalGroups = {}
				local bayIndexBase0 = 0
				for _, bay in pairs(lorryBayModelIndexesBase0) do
					table.insert(
						result.terminalGroups,
						{
							tag = bayIndexBase0,
							terminals = {
								{ bay.base0ModelIndex, 0 }
							}
						}
					)

					-- local adjacentCargoAreas = slotUtils.getAdjacentValues(cargoAreaModelIndexesBase0, bay.x, bay.y)
					-- print('LOLLO adjacentCargoAreas = ')
					-- debugPrint(adjacentCargoAreas)
					-- for _, v in pairs(adjacentCargoAreas) do
					-- 	table.insert(result.terminalGroups[#result.terminalGroups].terminals, {v, 0})
					-- end

					for _, v in pairs(allCargoAreaModelIndexesBase0) do
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {v, 0})
					end

					table.insert(result.stations[1].terminals, bayIndexBase0)
					bayIndexBase0 = bayIndexBase0 + 1
				end

				-- for lorryBayCounter = 1, tagCounterBase0 do
				-- 	table.insert(result.stations[1].terminals, lorryBayCounter - 1)
				-- end
				-- avoid dump when configuring
				if #(result.stations[1].terminals) == 0 then
					table.insert(result.stations[1].terminals, 0)
				end

				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- stock result.stations =
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- stock result.terminalGroups =
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep the m all different tho
				-- 		terminals = {
				-- 			{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 			{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				print('LOLLO lollo_lorry_station leaving terminateConstructionHook')
				print('LOLLO result.models = ')
				debugPrint(result.models)
				print('LOLLO result.stations = ')
				debugPrint(result.stations)
				print('LOLLO result.terminalGroups = ')
				debugPrint(result.terminalGroups)
			end

			-- print('LOLLO lollo_simple_lorry_bay_with_edges leaving updateFn, result = ')
			-- debugPrint(result)

			return result
		end,
		upgradeFn = function(_)
            print('LOLLO upgradeFn') -- never fires
            -- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
            -- If you leave it out, adding and removing tram tracks won't work.
            -- (Bus lanes don't work anyway.)
            return {}
        end,
	}
end