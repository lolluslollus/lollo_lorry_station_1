local vec3 = require "vec3"
local transf = require "transf"
local constructionutil = require "constructionutil"
local paramsutil = require "paramsutil"
local colliderutil = require "colliderutil"
local arrayUtils = require('lollo_lorry_station/arrayUtils')
local _constants = require('lollo_lorry_station/constants')
local edgeUtils = require('lollo_lorry_station/edgeHelper')
local slotUtils = require('lollo_lorry_station/slotHelpers')
local transfUtils = require('lollo_lorry_station/transfUtils')
local _idTransf = {1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}


function data()
	return {
		type = "STREET_STATION_CARGO",
		-- type = "STREET_STATION",
		-- type = 'STREET_CONSTRUCTION',
		description = {
			name = _("Lollo lorry station construction"),
			description = _("Lollo lorry station construction."),
		},
		availability = {
			yearFrom = 0,
			yearTo = 0
		},
		params = {
			-- {
			-- 	key = 'lockLayoutCentre',
			-- 	name = _('Lock curve'),
			-- 	tooltip = _('Lock a curve to keep its shape pretty and prevent other roads merging in. Unlock it to treat it like ordinary roads. You cannot relock an unlocked curve.'),
			-- 	values = {
			-- 		_('No'),
			-- 		_('Yes')
			-- 	},
			-- 	defaultIndex = 0
			-- },
		},
		-- hasCargoPlatform = true, -- useless
		-- streetTerminal = { -- useless
		-- 	cargo = true,
		-- },
		order = 5005,

		skipCollision = true,
		updateFn = function(params)
			local result = {
				colliders = {},
				coord2terminalInfo = {},
				cost = 1000,
				edgeLists = {},
				groundFaces = {},
				models = {},
				modelTagsAndNodes = {},
				slots = {},
				stations = {},
				terminalGroups = {},
				terrainAlignmentLists = {},
				demangleId = nil,
				mangleId = nil,
			}
			print('LOLLO starting updateFn, params = ')
			debugPrint(arrayUtils.cloneOmittingFields(params, {'state'}))

			local _lorryBayModuleIdsBeforeUpdate = {}
			if type(params.modules) == 'table' then
				for k, v in pairs(params.modules) do
					if v and v.metadata and v.metadata.lorryBay then
						_lorryBayModuleIdsBeforeUpdate[#_lorryBayModuleIdsBeforeUpdate+1] = tostring(k)
					end
				end
			end

			local _occupiedSlots = {}
			local _isSlotOccupied = function(x, y)
				return slotUtils.getValueFromNestedTable(_occupiedSlots, x, y) == true
				-- if _occupiedSlots[tostring(x)] == nil then return false end
				-- if _occupiedSlots[tostring(x)][tostring(y)] then return true end
				-- return false
			end
			local _setSlotOccupied = function(x, y)
				slotUtils.setValueInNestedTable(_occupiedSlots, true, x, y)
				-- if _occupiedSlots[tostring(x)] == nil then _occupiedSlots[tostring(x)] = {} end
				-- _occupiedSlots[tostring(x)][tostring(y)] = true
			end

			local _addModel = function(fileName, transf, tag)
				table.insert(result.models, {
					id = fileName,
					tag = tag,
					transf = transf,
				})
			end

			result.mangleId = function(x, y, baseId)
				return baseId + _constants.idRoundingFactor * (y  - _constants.yMin) + (x  - _constants.xMin)
			end

			result.demangleId = function(slotId)
				local function _getIdBase(slotId)
					local baseId = 0
					for _, v in pairs(_constants.idBasesSortedDesc) do
						if slotId >= v.id then
							baseId = v.id
							break
						end
					end

					return baseId > 0 and baseId or false
				end

				local baseId = _getIdBase(slotId)
				if not baseId then return false, false, false end

				local y = math.floor((slotId - baseId) / _constants.idRoundingFactor)
				local x = math.floor((slotId - baseId - y * _constants.idRoundingFactor))

				return x + _constants.xMin, y + _constants.yMin, baseId
			end

			-- add the streets leading into the station
--[[ 			result.edgeLists = {
				{
					type = 'STREET', -- 'TRACK'
					alignTerrain = false,
					params = {
						busLaneType = 'YES', -- does not pull, neither do hasBusLane and busLane, with true or false
						busLane = 'YES',
						-- catenary = true or false,
						hasBusType = 'YES',
						hasBus = true,
						skipCollision = true,
						--skipCollisionCheck = true,
						-- type = 'standard/country_medium_new.lua',
						type = 'internal_collision_free_road.lua',
						tramTrackType = 'NO' -- tramTrackType
					},
					edges = {
						{ { -10, -10, 0 }, { 0, 1, 0 } },
						{ { -10, -1, 0 }, { 0, 1, 0 } },
						-- { { -10, 0, 0 }, { 0, 1, 0 } },
					},
					-- edgeType = 'TUNNEL', 'BRIDGE',
					-- edgeTypeName = tunnel-or-bridge-name.lua
					freeNodes = {0},
					snapNodes = {0},
					skipCollision = true,
					-- slot = ???
					--					tag2nodes = {},
				},
				{
					type = 'STREET',
					alignTerrain = false,
					params = {
						skipCollision = true,
						--skipCollisionCheck = true,
						-- type = 'standard/country_medium_new.lua',
						type = 'internal_collision_free_road.lua',
						tramTrackType = 'NO' -- tramTrackType
					},
					edges = {
						{ { -10, 1, 0 }, { 0, 1, 0 } },
						-- { { -10, 0, 0 }, { 0, 1, 0 } }, -- LOLLO TODO if the edges touch the vehicle node, it dumps
						{ { -10, 10, 0 }, { 0, 1, 0 } },
					},
					freeNodes = {1},
					snapNodes = {1},
					skipCollision = true,
					--					tag2nodes = {},
				},
			} ]]

			-- add the lorry bay at 0, 0
			-- _addModel(_constants.lorryBayStreetside15x5ModelFileName, _idTransf, { lorryBay = true })
			-- slotUtils.setValueInNestedTable(
			-- 	result.coord2terminalInfo,
			-- 	{
			-- 		model = #result.models - 1, -- position with base 0
			-- 		terminal = 0 -- always 0, it seems
			-- 	},
			-- 	0,
			-- 	0
			-- )
			-- _setSlotOccupied(0, 0)

			-- add the default model at 0, 0
			-- _addModel(_constants.markModelFileName, _idTransf, _constants.markTag)
			
			-- add cargo area slots
			local slotXYs = {
				['-1'] = {
					['0'] = true,
				},
				['0'] = {
					['-1'] = true,
					['0'] = true,
					['1'] = true
				},
				['1'] = {
					['0'] = true,
				}
			}
			if type(params.modules) == 'table' then
				for moduId, _ in pairs(params.modules) do
					local moduleX, moduleY, moduleBaseId = result.demangleId(moduId)
					if moduleBaseId == _constants.idBases.cargoAreaInner15x15SlotId 
					or moduleBaseId == _constants.idBases.rightLorryBaySlotIdBase
					or moduleBaseId == _constants.idBases.leftLorryBaySlotIdBase then
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX, moduleY)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX, moduleY + 1)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX + 1, moduleY)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX, moduleY - 1)
						slotUtils.setValueInNestedTable(slotXYs, true, moduleX - 1, moduleY)
					end
				end
			end
			local adjacentXYs = slotUtils.getFlatTable(slotXYs)
			-- print('LOLLO adjacentXYs = ')
			-- debugPrint(adjacentXYs)
			for _, v in pairs(adjacentXYs) do
				_setSlotOccupied(v.x, v.y)
				table.insert(result.slots, {
					id = result.mangleId(v.x, v.y, _constants.idBases.cargoAreaInner15x15SlotId),
					transf = transf.transl(vec3.new(v.x * _constants.xTransfFactor, v.y * _constants.yTransfFactor, 0.0)),
					-- type = "street_terminal_passenger",
					type = _constants.cargoAreaInner15x15ModuleType,
					spacing = _constants.innerSpacing4x4,
					-- height
					-- shape 1 2 3 4
				})
			end

			-- add lorry bay slots
			-- no access to api or interface, I must work with the params.
			if type(params.streetNodeGroups) == 'table' and type(params.transf) == 'table' and type(params.inverseTransf) == 'table' then
				for _, nodeGroup in pairs(params.streetNodeGroups) do
					local absolutePosition = nodeGroup[2][1]
					print('LOLLO absolutePosition = ')
					debugPrint(absolutePosition)
					-- LOLLO TODO make relative coordinates, relative to the transf. This looks good but it is probably too stupid
					local relativePosition = {
						absolutePosition[1] - params.transf[13],
						absolutePosition[2] - params.transf[14],
					}
					print('LOLLO relativePosition 1 = ')
					debugPrint(relativePosition)
					-- this should be better
					local relativePosition = transfUtils.getVec123Transformed(absolutePosition, params.inverseTransf)
					print('LOLLO relativePosition 2 = ')
					debugPrint(relativePosition)

					local tangents = nodeGroup[2][2]
					-- _setSlotOccupied(x, y)
					local slotId = result.mangleId(
						math.floor(relativePosition[1] / _constants.xTransfFactor),
						math.floor(relativePosition[2] / _constants.yTransfFactor),
						_constants.idBases.leftLorryBaySlotIdBase
					)
					table.insert(
						result.slots,
						{
							id = slotId,
							transf = transfUtils.mul(
								transf.rotZTransl(
									math.pi / 2.0 + math.atan2(tangents[2], tangents[1]),
									-- the shift is to avoid the dot in the grid getting red, the module makes up for it.
									vec3.new(_constants.anyStreetsideXShift + absolutePosition[1], absolutePosition[2], absolutePosition[3])
								),
								params.inverseTransf
							),
							type = _constants.lorryBayStreetside15x5ModuleType,
							spacing = _constants.anyStreetsideSpacing,
							skipCollision = true, -- useless
							-- height
							-- shape
						}
					)
					result.modelTagsAndNodes[tostring(slotId)] = {
						lorryBay = true,
						node0 = nodeGroup[1],
						node1 = nodeGroup[3],
						nodeMid = nodeGroup[2]
					}
					local slotId = result.mangleId(
						math.floor(relativePosition[1] / _constants.xTransfFactor),
						math.floor(relativePosition[2] / _constants.yTransfFactor),
						_constants.idBases.rightLorryBaySlotIdBase
					)
					table.insert(
						result.slots,
						{
							id = slotId,
							transf = transfUtils.mul(
								transf.rotZTransl(
									- math.pi / 2.0 + math.atan2(tangents[2], tangents[1]),
									-- the shift is to avoid the dot in the grid getting red, the module makes up for it.
									vec3.new(-_constants.anyStreetsideXShift + absolutePosition[1], absolutePosition[2], absolutePosition[3])
								),
								params.inverseTransf
							),
							type = _constants.lorryBayStreetside15x5ModuleType,
							spacing = _constants.anyStreetsideSpacing,
							skipCollision = true, -- useless
							-- height
							-- shape
						}
					)
					result.modelTagsAndNodes[tostring(slotId)] = {
						lorryBay = true,
						node0 = nodeGroup[1],
						node1 = nodeGroup[3],
						nodeMid = nodeGroup[2]
					}
				end
			end

			result.terminateConstructionHook = function(one, two)
				print('LOLLO starting terminateConstructionHook')
				debugPrint(one)
				debugPrint(two)
				-- this fires after the user has added a module
				local station = { terminals = {}, tag = 0 } -- tag = 0 means cargo
				local cargoAreaModelIndexesBase0 = slotUtils.getCargoAreaModelIndexesBase0(result.models)
				-- LOLLO TODO in future, take only non-adjacent lorry bays
				local lorryBayModelIndexesBase0 = slotUtils.getLorryBayModelIndexesBase0(result.models)

				local tagCounterBase0 = 0
				result.terminalGroups = {}
				for _, bay in pairs(lorryBayModelIndexesBase0) do
					table.insert(result.terminalGroups, {tag = tagCounterBase0, terminals = { { bay.base0ModelIndex, 0 }}})

					local adjacentCargoAreas = slotUtils.getAdjacentValues(cargoAreaModelIndexesBase0, bay.x, bay.y)
print('LOLLO adjacentCargoAreas = ')
debugPrint(adjacentCargoAreas)
					for _, v in pairs(adjacentCargoAreas) do
						table.insert(result.terminalGroups[#result.terminalGroups].terminals, {v, 0})
					end

					tagCounterBase0 = tagCounterBase0 + 1
				end

				result.stations = {
					{
						tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
						terminals = { } -- 0 is the position of the linked terminal group, in base 0
					}
				}
				for lorryBayCounter = 1, tagCounterBase0 do
					table.insert(result.stations[1].terminals, lorryBayCounter - 1)
				end
				-- avoid dump when configuring
				if #(result.stations[1].terminals) == 0 then
					table.insert(result.stations[1].terminals, 0)
				end

				-- it should output something like (this example has one terminal made of two adjacent bits)
				-- LOLLO stock result.stations =
				-- 	{
				-- 		{
				-- 			tag = 0, -- in the stock station, this is 0 for cargo and 1 for passengers
				-- 			terminals = { 0 } -- 0 is the position of the linked terminal group, in base 0
				-- 		}
				-- 	}
				-- LOLLO stock result.terminalGroups =
				-- {
				-- 	{
				-- 		tag = -1, -- possibly useless, try to keep the m all different tho
				-- 		terminals = {
				-- 		{ 22, 0 }, -- 22 is the position of a model with a terminal, in base 0
				-- 		{ 25, 0 }, -- 0 is always 0 in the stock station, it is something like a terminal number
				-- 		}
				-- 	}
				-- }

				-- test: add road connections to lorry bays
				local newModelTags = {}
				print('LOLLO _lorryBayModuleIdsBeforeUpdate =')
				debugPrint(_lorryBayModuleIdsBeforeUpdate)
				for _, model in pairs(result.models) do
					if type(model) == 'table' then
						local slotId = model.slotId
						print('LOLLO model.slotId = ', slotId, 'type = ', type(slotId))
						if slotId then
				-- LOLLO TODO this fails coz the module is always there,
				-- updateFn is called too often to do this
				-- solution: persist the edges I have already split
				-- but: what if the road has changed since the last split?
						local isInModules = false
							for _, moduleId in pairs(_lorryBayModuleIdsBeforeUpdate) do
								print('LOLLO moduleId = ', moduleId, 'type = ', type(moduleId))
								if moduleId == slotId then
									print('LOLLO isInModules is true')
									isInModules = true
									break
								end
							end
							if not isInModules then
								newModelTags[#newModelTags+1] = slotId
							end
						end
					end
				end
				print('LOLLO newModelTags = ')
				debugPrint(newModelTags)
				-- LOLLO TODO split newModelTags edges using the data in result.modelTagsAndNodes

				print('LOLLO lollo_lorry_station leaving terminateConstructionHook')
				if #station.terminals > 0 then table.insert(result.stations, station) end
				print('LOLLO result.models = ')
				debugPrint(result.models)
				print('LOLLO result.stations = ')
				debugPrint(result.stations)
				print('LOLLO result.terminalGroups = ')
				debugPrint(result.terminalGroups)
			end

			local isNoLorryBays = true
			if type(params.modules) == 'table' then
				for _, modu in pairs(params.modules) do
					print('LOLLO modu =')
					if modu.metadata.lorryBay then
						isNoLorryBays = false
						break
					end
				end
			end
			if isNoLorryBays and type(result.models) == 'table' then
				local lorryBayModelIndexesBase0 = slotUtils.getLorryBayModelIndexesBase0(result.models)
				print('LOLLO #lorryBayModelIndexesBase0 =', #lorryBayModelIndexesBase0)
				if #lorryBayModelIndexesBase0 > 0 then
					isNoLorryBays = false
				end
			end
			-- if params.modules[result.mangleId({0, 0, 0})] == nil and params.modules[result.mangleId({-1, 0, 0})] == nil
			-- and params.modules[result.mangleId({0, 0, 1})] == nil and params.modules[result.mangleId({-1, 0, 1})] == nil
			-- and params.modules[result.mangleId({55, 0, 3})] == nil and params.modules[result.mangleId({55, 0, 4})] == nil and params.modules[result.mangleId({55, 0, 5})] == nil
			-- and params.modules[result.mangleId({55, 1, 3})] == nil and params.modules[result.mangleId({55, 1, 4})] == nil and params.modules[result.mangleId({55, 1, 5})] == nil then
			if isNoLorryBays then
				table.insert(result.models, {
					-- id = "asset/icon/marker_exclamation.mdl",
					id = _constants.markModelFileName,
					transf = transf.transl(vec3.new(0.0, 0.0, 0.0)),
				})
			end

			print('LOLLO lollo_lorry_station leaving updateFn, result = ')
			debugPrint(result)

			return result
		end,
		upgradeFn = function(_)
		-- it does not get here when I call it with game.interface.upgradeConstruction()
		-- 	-- LOLLO NOTE the game wants this function to be defined, even if it returns an empty table.
		-- 	-- If you leave it out, adding and removing tram tracks won't work.
		-- 	-- (Bus lanes don't work anyway.)
		-- 	return {}
		end,
	}
end