LOLLO api = 
{
  cmd = {
    buildProposal = {
      __doc__ = "([SimpleProposal] proposal, Unknown-type context, Function callback) -> Nil"
    },
    make = {
      book = {
        __doc__ = "(Entity playerEntity, Unknown-type journalEntry) -> [Command]"
      },
      buyVehicle = {
        __doc__ = "(Entity playerEntity, Entity depotEntity, Unknown-type config) -> [Command]"
      },
      connectTownsAndIndustries = {
        __doc__ = "(Vector[Entity] townEntities, Vector[Vec2i] connections, Bool keep) -> [Command]"
      },
      createLine = {
        __doc__ = "(String name, Vec3f color, Entity playerEntity, Line line) -> [Command]"
      },
      createTowns = {
        __doc__ = "(Vector[Unknown-type] towns, Bool) -> [Command]"
      },
      deleteLine = {
        __doc__ = "(Entity lineEntity) -> [Command]"
      },
      developTown = {
        __doc__ = "(Vec2f position) -> [Command]"
      },
      instantlyUpdateTownCargoNeeds = {
        __doc__ = "(Entity townEntity, Unknown-type cargoNeeds) -> [Command]"
      },
      removeField = {
        __doc__ = "(Entity fieldEntity) -> [Command]"
      },
      removeTown = {
        __doc__ = "(Entity townEntity) -> [Command]"
      },
      replaceTerrain = {
        __doc__ = "(Unknown-type, Unknown-type, String, Entity, Bool) -> [Command]"
      },
      replaceVehicle = {
        __doc__ = "(Entity vehicleEntity, Unknown-type config) -> [Command]"
      },
      reverse = {
        __doc__ = "(Entity vehicleEntity) -> [Command]"
      },
      sellVehicle = {
        __doc__ = "(Entity vehicleEntity) -> [Command]"
      },
      sendToDepot = {
        __doc__ = "(Entity vehicleEntity, Bool sellOnArrival) -> [Command]"
      },
      setAnimalState = {
        __doc__ = "(Entity animalEntity, Number movementType, Number targetChangedElapsed, Number invalidTileElapsed, Number movementSpeed, Number angularSpeed) -> [Command]"
      },
      setCalendarSpeed = {
        __doc__ = "(Number millisecondsPerDay) -> [Command]"
      },
      setColor = {
        __doc__ = "(Entity entity, Vec3f color) -> [Command]"
      },
      setDate = {
        __doc__ = "(Date date) -> [Command]"
      },
      setGameSpeed = {
        __doc__ = "(Number speed) -> [Command]"
      },
      setLine = {
        __doc__ = "(Entity vehicleEntity, Entity lineEntity, Number stopIndex) -> [Command]"
      },
      setName = {
        __doc__ = "(Entity entity, String name) -> [Command]"
      },
      setNoCosts = {
        __doc__ = "(Bool enabled) -> [Command]"
      },
      setTownInfo = {
        __doc__ = "(Entity townEntity, Unknown-type initialLandUseCapacities) -> [Command]"
      },
      setUserStopped = {
        __doc__ = "(Entity vehicleEntity, Bool userStopped) -> [Command]"
      },
      setVehicleTargetMaintenanceState = {
        __doc__ = "(Entity vehicleEntity, Number value) -> [Command]"
      },
      spawnAnimal = {
        __doc__ = "(String fileName, Vec2f position) -> [Command]"
      },
      updateLine = {
        __doc__ = "(Entity lineEntity, Line line) -> [Command]"
      }
    },
    sendCommand = {
      __doc__ = "([Command] command, Function callback) -> Nil"
    }
  },
  engine = {
    aircraftMoveSystem = {
      getAirCraftInfo = {
        __doc__ = "(Entity vehicleEntity) -> AircraftInfo"
      },
      isReserved = {
        __doc__ = "(EdgeId edgeId) -> Bool"
      }
    },
    baseParallelStripSystem = {
      getStrips = {
        __doc__ = "(Entity edgeEntity) -> Vector[Entity]"
      }
    },
    catchmentAreaSystem = {
      getEdge2stationsMap = {
        __doc__ = "() -> Table[EdgeId,Vector[Pair[Entity,Number]]]"
      },
      getStation2edgesMap = {
        __doc__ = "() -> Table[Entity,Vector[Pair[EdgeId,Number]]]"
      },
      getStation2stationsAndDistancesMap = {
        __doc__ = "() -> Table[Entity,Table[Entity,Number]]"
      }
    },
    getComponent = {
      __doc__ = "(Entity entity, Unknown-type type) -> Object"
    },
    lineSystem = {
      getLineStops = {
        __doc__ = "(Entity stationGroupEntity) -> Vector[Pair[Entity,Number]]"
      },
      getLineStopsForStation = {
        __doc__ = "(Entity stationEntity) -> Vector[Pair[Entity,Number]]"
      },
      getLineStopsForTerminal = {
        __doc__ = "(Entity stationEntity, Number terminal) -> Vector[Pair[Entity,Number]]"
      },
      getLines = {
        __doc__ = "() -> Vector[Entity]"
      },
      getLinesForPlayer = {
        __doc__ = "(Entity playerEntity) -> Vector[Entity]"
      },
      getLinesForWaypoint = {
        __doc__ = "(Entity waypointEntity) -> Vector[Entity]"
      },
      getProblemLines = {
        __doc__ = "(Entity playerEntity) -> Vector[Pair[Entity,Unknown-type]]"
      },
      getStationGroup2LineStopsMap = {
        __doc__ = "() -> Table[Entity,Vector[Pair[Entity,Number]]]"
      },
      getTerminal2lineStops = {
        __doc__ = "() -> Table[Pair[Entity,Number],Vector[Pair[Entity,Number]]]"
      }
    },
    railRoadCrossingSystem = {
      getRailroadCrossingForEdge = {
        __doc__ = "(Entity edgeEntity) -> Entity"
      },
      getRailroadCrossingForNode = {
        __doc__ = "(Entity nodeEntity) -> Entity"
      }
    },
    riverSystem = {
      getWaterMeshEntities = {
        __doc__ = "(Vec2i tile0, Vec2i tile1) -> Vector[Entity]"
      }
    },
    runwaySystem = {
      getLandingNodeIdMap = {
        __doc__ = "() -> Table[NodeId,Pair[Entity,Number]]"
      },
      getTakeoffNodeIdMap = {
        __doc__ = "() -> Table[NodeId,Pair[Entity,Number]]"
      }
    },
    shipMoveSystem = {
      getShipInfo = {
        __doc__ = "(Entity vehicleEntity) -> ShipInfo"
      }
    },
    signalSystem = {
      getSignal = {
        __doc__ = "(EdgeId edgeId, Bool reversed) -> Pair[Entity,Number]"
      }
    },
    simCargoAtTerminalSystem = {
      getCount = {
        __doc__ = "(EdgeId edgeId, Id cargoType) -> Number"
      },
      getEntity = {
        __doc__ = "(EdgeId edgeId, Id cargoType) -> Entity"
      },
      getMaxCount = {
        __doc__ = "(EdgeId edgeId, Id cargoType) -> Number"
      },
      getPlace = {
        __doc__ = "(EdgeId edgeId, Id cargoType) -> Number"
      },
      hasFreePlaces = {
        __doc__ = "(EdgeId edgeId, Id cargoType) -> Bool"
      },
      supportsCargoType = {
        __doc__ = "(EdgeId edgeId, Id cargoType) -> Bool"
      }
    },
    simCargoSystem = {
      getSimCargoAtTerminalForTransportNetwork = {
        __doc__ = "(Entity tnEntity) -> Vector[Entity]"
      },
      getSimCargoIdleForTransportNetwork = {
        __doc__ = "(Entity tnEntity) -> Vector[Entity]"
      },
      getSimCargosForLine = {
        __doc__ = "(Entity lineEntity) -> Vector[Entity]"
      },
      getSimCargosForSource = {
        __doc__ = "(Entity sourceEntity) -> Vector[Entity]"
      },
      getSimCargosForTarget = {
        __doc__ = "(Entity targetEntity) -> Vector[Entity]"
      }
    },
    simEntityAtStockSystem = {
      getStock2SimEntityMap = {
        __doc__ = "() -> Table[Pair[Entity,Id],Vector[Entity]]"
      },
      getStockCount = {
        __doc__ = "(Entity stockEntity, Id stockId) -> Number"
      },
      getStockEntities = {
        __doc__ = "(Entity stockEntity, Id stockId) -> Unknown-type"
      },
      getStockSimEntity = {
        __doc__ = "(Entity stockEntity, Id stockId) -> Entity"
      }
    },
    simEntityAtTerminalSystem = {  },
    simEntityAtVehicleSystem = {
      getFare = {
        __doc__ = "() -> Number"
      },
      getVehicle2Cargo2SimEntitesMap = {
        __doc__ = "() -> Table[Entity,Vector[Vector[Entity]]]"
      }
    },
    simPersonAtTerminalSystem = {
      getEdgeInfoMap = {
        __doc__ = "() -> Table[EdgeId,Unknown-type]"
      },
      getNumFreePlaces = {
        __doc__ = "(EdgeId edgeId) -> Number"
      },
      getPos01 = {
        __doc__ = "(EdgeId edgeId, Number place) -> Pair[Number,Number]"
      }
    },
    simPersonAtVehicleSystem = {
      getVehiclePartInfoList = {
        __doc__ = "(Entity vehicleEntity) -> Vector[Unknown-type]"
      }
    },
    simPersonSystem = {
      getCount = {
        __doc__ = "() -> Number"
      },
      getDestination2SpMap = {
        __doc__ = "() -> Table[Entity,Vector[Entity]]"
      },
      getSimPersonsAtTerminalForTransportNetwork = {
        __doc__ = "(Entity tnEntity) -> Vector[Entity]"
      },
      getSimPersonsForDestination = {
        __doc__ = "(Entity targetEntity) -> Vector[Entity]"
      },
      getSimPersonsForLine = {
        __doc__ = "(Entity lineEntity) -> Vector[Entity]"
      },
      getSimPersonsForTarget = {
        __doc__ = "(Entity targetEntity) -> Vector[Entity]"
      },
      getSimPersonsIdleForTransportNetwork = {
        __doc__ = "(Entity tnEntity) -> Vector[Entity]"
      },
      getSimPersonsMovingForTransportNetwork = {
        __doc__ = "(Entity tnEntity) -> Vector[Entity]"
      }
    },
    stationGroupSystem = {
      getExpiredStationGroups = {
        __doc__ = "(Number time) -> Vector[Entity]"
      },
      getExpiryProgress = {
        __doc__ = "(Entity stationGroupEntity, Number time) -> Number"
      },
      getStationGroup = {
        __doc__ = "(Entity stationEntity) -> Entity"
      }
    },
    stationSystem = {
      getPersonNodeId2StationTerminalsMap = {
        __doc__ = "() -> Table[NodeId,Vector[Pair[Entity,Number]]]"
      },
      getStation2TownMap = {
        __doc__ = "() -> Table[NodeId,Pair[Entity,Number]]"
      },
      getStationTerminalForVehicleNode = {
        __doc__ = "(NodeId nodeId) -> Pair[Entity,Number]"
      },
      getStationTerminalsForPersonEdge = {
        __doc__ = "(EdgeId edgeId) -> Vector[Pair[Entity,Number]]"
      },
      getStationTerminalsForPersonNode = {
        __doc__ = "(NodeId nodeId) -> Vector[Pair[Entity,Number]]"
      },
      getStations = {
        __doc__ = "(Entity townEntity) -> Vector[Entity]"
      },
      getTown2StationsMap = {
        __doc__ = "() -> Table[Entity,Vector[Entity]]"
      }
    },
    stockListSystem = {
      getCargoType2stockList2sourceAndCount = {
        __doc__ = "() -> Vector[Table[Entity,Table[Entity,Number]]]"
      },
      getSources = {
        __doc__ = "(Entity destinationEntity) -> Vector[Entity]"
      }
    },
    streetConnectorSystem = {
      forEach = {
        __doc__ = "(Function fn) -> Nil"
      },
      getConstructionEntityForDepot = {
        __doc__ = "(Entity depotEntity) -> Entity"
      },
      getConstructionEntityForEdge = {
        __doc__ = "(Entity edgeEntity) -> Entity"
      },
      getConstructionEntityForSimBuilding = {
        __doc__ = "(Entity townBuildingEntity) -> Entity"
      },
      getConstructionEntityForStation = {
        __doc__ = "(Entity stationEntity) -> Entity"
      },
      getConstructionEntityForTownBuilding = {
        __doc__ = "(Entity townBuilding) -> Entity"
      },
      getNode2StreetConnectorMap = {
        __doc__ = "() -> Table[Entity,Entity]"
      },
      getStation2ConstructionMap = {
        __doc__ = "() -> Table[Entity,Entity]"
      },
      getStreetConnectorEntity = {
        __doc__ = "(Entity nodeEntity) -> Entity"
      }
    },
    streetSystem = {
      getEdgeForEdgeObject = {
        __doc__ = "(Entity edgeEntity) -> Entity"
      },
      getEdgeObject2EdgeMap = {
        __doc__ = "() -> Table[Entity,Entity]"
      },
      getNode2SegmentMap = {
        __doc__ = "() -> Table[Entity,Vector[Entity]]"
      },
      getNode2StreetEdgeMap = {
        __doc__ = "() -> Table[Entity,Vector[Entity]]"
      },
      getNode2TrackEdgeMap = {
        __doc__ = "() -> Table[Entity,Vector[Entity]]"
      }
    },
    townBuildingSystem = {
      getBuilding = {
        __doc__ = "(Entity parcelEntity) -> Entity"
      },
      getCargoSupplyAndLimit = {
        __doc__ = "(Entity townEntity) -> Table[Id,Pair[Number,Number]]"
      },
      getLandUsePersonCapacities = {
        __doc__ = "(Entity townEntity) -> Unknown-type"
      },
      getParcel2BuildingMap = {
        __doc__ = "() -> Table[Entity,Entity]"
      },
      getPersonCapacity2townBuildingMap = {
        __doc__ = "() -> Table[Entity,Entity]"
      },
      getTown2BuildingMap = {
        __doc__ = "() -> Table[Entity,Vector[Entity]]"
      },
      getTown2personCapacitiesMap = {
        __doc__ = "() -> Table[Entity,Unknown-type]"
      },
      hasBuilding = {
        __doc__ = "(Entity parcelEntity) -> Bool"
      }
    },
    tpNetLinkSystem = {
      getEdgeId2linkEntities = {
        __doc__ = "() -> Table[EdgeId,Vector[Entity]]"
      },
      getLinkEntities = {
        __doc__ = "(EdgeId edgeId) -> Vector[Entity]"
      }
    },
    trainMoveSystem = {
      getBlockedTrains = {
        __doc__ = "() -> Vector[Pair[Entity,Entity]]"
      },
      getTrainInfo = {
        __doc__ = "(Entity trainEntity) -> Unknown-type"
      },
      getVehicleInfo = {
        __doc__ = "(Entity vehicleEntity) -> Unknown-type"
      }
    },
    transportHistorySystem = {
      getStationTransportHistoryReferences = {
        __doc__ = "(Entity stationEntity) -> Vector[Entity]"
      },
      getTargetTransportHistoryReferences = {
        __doc__ = "(Entity targetEntity) -> Vector[Entity]"
      }
    },
    transportNetworkSystem = {
      getIntersections = {
        __doc__ = "(Entity tnEntity) -> Unknown-type"
      }
    },
    transportVehicleSystem = {
      getDepotVehicles = {
        __doc__ = "(Entity depotEntity) -> Vector[Entity]"
      },
      getGoingToDepotVehicles = {
        __doc__ = "(Entity depotEntity) -> Vector[Entity]"
      },
      getInfo = {
        __doc__ = "(Entity transportVehicleEntity) -> Unknown-type"
      },
      getLine2VehicleMap = {
        __doc__ = "() -> Table[Entity,Vector[Entity]]"
      },
      getLineStopVehicles = {
        __doc__ = "(Entity lineEntity, Number stopIndex) -> Vector[Entity]"
      },
      getLineVehicles = {
        __doc__ = "(Entity lineEntity) -> Vector[Entity]"
      },
      getNoPathVehicles = {
        __doc__ = "() -> Vector[Entity]"
      },
      getVehicleNames = {
        __doc__ = "(Unknown-type carrier) -> Vector[String]"
      },
      getVehicles = {
        __doc__ = "(Vector[Entity] tnEntities, Bool wholePath) -> Vector[Entity]"
      }
    },
    vehicleDepotSystem = {
      getDepotForInNodeId = {
        __doc__ = "(NodeId nodeId) -> Entity"
      }
    }
  },
  res = {
    autoGroundTexRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    bridgeTypeRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    cargoTypeRep = {
      find = {
        __doc__ = "(String name) -> Id"
      },
      get = {
        __doc__ = "(Id index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Id index) -> String"
      },
      getName = {
        __doc__ = "(Id index) -> String"
      }
    },
    groundTextureRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    modelRep = {
      contains = {
        __doc__ = "(Number id) -> Bool"
      },
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number id) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      }
    },
    multipleUnitRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    railroadCrossingTypeRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    streetTypeRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    trackTypeRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    trafficLightTypeRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    },
    tunnelTypeRep = {
      find = {
        __doc__ = "(String name) -> Number"
      },
      get = {
        __doc__ = "(Number index) -> Unknown-type"
      },
      getAll = {
        __doc__ = "() -> Vector[String]"
      },
      getFileName = {
        __doc__ = "(Number index) -> String"
      },
      getName = {
        __doc__ = "(Number index) -> String"
      }
    }
  },
  type = {
    Account = {
      __name = "sol.ecs::component::Account.user",
      __type = {
        name = "ecs::component::Account"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Aircraft = {
      __name = "sol.ecs::component::Aircraft.user",
      __type = {
        name = "ecs::component::Aircraft"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    AircraftInfo = {
      __name = "sol.ecs::AircraftMoveSystem::AircraftInfo.user",
      __type = {
        name = "ecs::AircraftMoveSystem::AircraftInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Animal = {
      __name = "sol.ecs::component::Animal.user",
      __type = {
        name = "ecs::component::Animal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    AssetGroup = {
      __name = "sol.ecs::component::AssetGroup.user",
      __type = {
        name = "ecs::component::AssetGroup"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    AssetGroupAutoRemove = {
      __name = "sol.ecs::component::AssetGroupAutoRemove.user",
      __type = {
        name = "ecs::component::AssetGroupAutoRemove"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    AudioEmitter = {
      __name = "sol.ecs::component::AudioEmitter.user",
      __type = {
        name = "ecs::component::AudioEmitter"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    AutoGroundTex = {
      __name = "sol.AutoGroundTex.user",
      __type = {
        name = "AutoGroundTex"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BaseEdge = {
      __name = "sol.ecs::component::BaseEdge.user",
      __type = {
        name = "ecs::component::BaseEdge"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BaseEdgeRange = {
      __name = "sol.BaseEdgeRange.user",
      __type = {
        name = "BaseEdgeRange"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BaseEdgeStreet = {
      __name = "sol.ecs::component::BaseEdgeStreet.user",
      __type = {
        name = "ecs::component::BaseEdgeStreet"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BaseEdgeTrack = {
      __name = "sol.ecs::component::BaseEdgeTrack.user",
      __type = {
        name = "ecs::component::BaseEdgeTrack"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BaseNode = {
      __name = "sol.ecs::component::BaseNode.user",
      __type = {
        name = "ecs::component::BaseNode"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BaseNodeTrafficLight = {
      __name = "sol.ecs::component::BaseNodeTrafficLight.user",
      __type = {
        name = "ecs::component::BaseNodeTrafficLight"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Book = {
      __name = "sol.CmdData::Book.user",
      __type = {
        name = "CmdData::Book"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BoundingInfo = {
      __name = "sol.BoundingInfo.user",
      __type = {
        name = "BoundingInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = ()
    },
    BoundingVolume = {
      __name = "sol.ecs::component::BoundingVolume.user",
      __type = {
        name = "ecs::component::BoundingVolume"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BuildCost = {
      __name = "sol.ecs::component::BuildCost.user",
      __type = {
        name = "ecs::component::BuildCost"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BulldozerInfo = {
      __name = "sol.ecs::component::BulldozerInfo.user",
      __type = {
        name = "ecs::component::BulldozerInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    BuyVehicle = {
      __name = "sol.CmdData::BuyVehicle.user",
      __type = {
        name = "CmdData::BuyVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    CargoType = {
      __name = "sol.transport::CargoType.user",
      __type = {
        name = "transport::CargoType"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Collider = {
      __name = "sol.Collider.user",
      __type = {
        name = "Collider"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    CollisionInfo = {
      __name = "sol.construction_util::CollisionInfo.user",
      __type = {
        name = "construction_util::CollisionInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Color = {
      __name = "sol.ecs::component::Color.user",
      __type = {
        name = "ecs::component::Color"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ComponentType = {  },
    Construction = {
      __name = "sol.ecs::component::Construction.user",
      __type = {
        name = "ecs::component::Construction"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Context = {
      __name = "sol.construction_builder_util::Context.user",
      __type = {
        name = "construction_builder_util::Context"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    CreateLine = {
      __name = "sol.CmdData::CreateLine.user",
      __type = {
        name = "CmdData::CreateLine"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    CreateTowns = {
      __name = "sol.CmdData::CreateTowns.user",
      __type = {
        name = "CmdData::CreateTowns"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Date = {
      __name = "sol.boost::gregorian::date.user",
      __type = {
        name = "boost::gregorian::date"        is = ()
      }      __eq = (),
      __gc = (),
      __le = (),
      __lt = (),
      __pairs = (),
      __tostring = (),
      new = ()
    },
    DeleteLine = {
      __name = "sol.CmdData::DeleteLine.user",
      __type = {
        name = "CmdData::DeleteLine"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    DevelopTown = {
      __name = "sol.CmdData::DevelopTown.user",
      __type = {
        name = "CmdData::DevelopTown"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    EdgeId = {
      __name = "sol.transport::EdgeId.user",
      __type = {
        name = "transport::EdgeId"        is = ()
      }      __eq = (),
      __gc = (),
      __lt = (),
      __pairs = (),
      new = ()
    },
    EdgeObjectType = {  },
    EdgePos = {
      __name = "sol.transport::EdgePos.user",
      __type = {
        name = "transport::EdgePos"        is = ()
      }      __eq = (),
      __gc = (),
      __lt = (),
      __pairs = (),
      new = ()
    },
    EmissionGrid = {
      __name = "sol.ecs::component::EmissionGrid.user",
      __type = {
        name = "ecs::component::EmissionGrid"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ErrorState = {
      __name = "sol.ErrorState.user",
      __type = {
        name = "ErrorState"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Field = {
      __name = "sol.ecs::component::Field.user",
      __type = {
        name = "ecs::component::Field"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    GameSpeed = {
      __name = "sol.ecs::component::GameSpeed.user",
      __type = {
        name = "ecs::component::GameSpeed"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    GameTime = {
      __name = "sol.ecs::component::GameTime.user",
      __type = {
        name = "ecs::component::GameTime"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    GroundTexture = {
      __name = "sol.GroundTexture.user",
      __type = {
        name = "GroundTexture"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    JournalEntry = {
      __name = "sol.JournalEntry.user",
      __type = {
        name = "JournalEntry"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    JournalEntryCategory = {
      __name = "sol.JournalEntry::Category.user",
      __type = {
        name = "JournalEntry::Category"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Line = {
      __name = "sol.ecs::component::Line.user",
      __type = {
        name = "ecs::component::Line"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    LogBook = {
      __name = "sol.ecs::component::LogBook.user",
      __type = {
        name = "ecs::component::LogBook"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    LotList = {
      __name = "sol.ecs::component::LotList.user",
      __type = {
        name = "ecs::component::LotList"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    MaintenanceCost = {
      __name = "sol.ecs::component::MaintenanceCost.user",
      __type = {
        name = "ecs::component::MaintenanceCost"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Mat4f = {
      __name = "sol.CMat4f.user",
      __type = {
        name = "CMat4f"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      __tostring = (),
      new = ()
    },
    MetadataMap = {
      __name = "sol.MetadataMap.user",
      __type = {
        name = "MetadataMap"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Model = {
      __name = "sol.Model.user",
      __type = {
        name = "Model"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = ()
    },
    ModelInstance = {
      __name = "sol.ModelInstance.user",
      __type = {
        name = "ModelInstance"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ModelInstanceList = {
      __name = "sol.ecs::component::ModelInstanceList.user",
      __type = {
        name = "ecs::component::ModelInstanceList"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ModelPerson = {
      __name = "sol.ecs::component::ModelPerson.user",
      __type = {
        name = "ecs::component::ModelPerson"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ModelPersonIdle = {
      __name = "sol.ecs::component::ModelPersonIdle.user",
      __type = {
        name = "ecs::component::ModelPersonIdle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    MovePath = {
      __name = "sol.ecs::component::MovePath.user",
      __type = {
        name = "ecs::component::MovePath"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    MovePathAircraft = {
      __name = "sol.ecs::component::MovePathAircraft.user",
      __type = {
        name = "ecs::component::MovePathAircraft"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    MultipleUnit = {
      __name = "sol.MultipleUnit.user",
      __type = {
        name = "MultipleUnit"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Name = {
      __name = "sol.ecs::component::Name.user",
      __type = {
        name = "ecs::component::Name"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    NodeAndEntity = {
      __name = "sol.street_util::CompAndEntity<ecs::component::BaseNode>.user",
      __type = {
        name = "street_util::CompAndEntity<ecs::component::BaseNode>"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    NodeId = {
      __name = "sol.transport::NodeId.user",
      __type = {
        name = "transport::NodeId"        is = ()
      }      __eq = (),
      __gc = (),
      __lt = (),
      __pairs = (),
      new = ()
    },
    Parcel = {
      __name = "sol.ecs::component::Parcel.user",
      __type = {
        name = "ecs::component::Parcel"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ParticleSystem = {
      __name = "sol.ecs::component::ParticleSystem.user",
      __type = {
        name = "ecs::component::ParticleSystem"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    PersonCapacity = {
      __name = "sol.ecs::component::PersonCapacity.user",
      __type = {
        name = "ecs::component::PersonCapacity"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Player = {
      __name = "sol.ecs::component::Player.user",
      __type = {
        name = "ecs::component::Player"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    PlayerOwned = {
      __name = "sol.ecs::component::PlayerOwned.user",
      __type = {
        name = "ecs::component::PlayerOwned"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Proposal = {
      __name = "sol.construction_builder_util::Proposal.user",
      __type = {
        name = "construction_builder_util::Proposal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ProposalCreateCallbackResult = {
      __name = "sol.campaign::callback::ProposalCreateCallbackResult.user",
      __type = {
        name = "campaign::callback::ProposalCreateCallbackResult"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ProposalData = {
      __name = "sol.construction_builder_util::ProposalData.user",
      __type = {
        name = "construction_builder_util::ProposalData"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    RailVehicle = {
      __name = "sol.ecs::component::RailVehicle.user",
      __type = {
        name = "ecs::component::RailVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    RailroadCrossing = {
      __name = "sol.ecs::component::RailroadCrossing.user",
      __type = {
        name = "ecs::component::RailroadCrossing"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    RailroadCrossingType = {
      __name = "sol.RailroadCrossingType.user",
      __type = {
        name = "RailroadCrossingType"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    RemoveField = {
      __name = "sol.CmdData::RemoveField.user",
      __type = {
        name = "CmdData::RemoveField"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    RemoveTown = {
      __name = "sol.CmdData::RemoveTown.user",
      __type = {
        name = "CmdData::RemoveTown"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ReplaceVehicle = {
      __name = "sol.CmdData::ReplaceVehicle.user",
      __type = {
        name = "CmdData::ReplaceVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Reverse = {
      __name = "sol.CmdData::Reverse.user",
      __type = {
        name = "CmdData::Reverse"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    RoadVehicle = {
      __name = "sol.ecs::component::RoadVehicle.user",
      __type = {
        name = "ecs::component::RoadVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    RunwayList = {
      __name = "sol.ecs::component::RunwayList.user",
      __type = {
        name = "ecs::component::RunwayList"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SegmentAndEntity = {
      __name = "sol.street_util::SegmentAndEntity.user",
      __type = {
        name = "street_util::SegmentAndEntity"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SellVehicle = {
      __name = "sol.CmdData::SellVehicle.user",
      __type = {
        name = "CmdData::SellVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SendToDepot = {
      __name = "sol.CmdData::SendToDepot.user",
      __type = {
        name = "CmdData::SendToDepot"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetAnimalState = {
      __name = "sol.CmdData::SetAnimalState.user",
      __type = {
        name = "CmdData::SetAnimalState"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetCalendarSpeed = {
      __name = "sol.CmdData::SetCalendarSpeed.user",
      __type = {
        name = "CmdData::SetCalendarSpeed"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetColor = {
      __name = "sol.CmdData::SetColor.user",
      __type = {
        name = "CmdData::SetColor"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetDate = {
      __name = "sol.CmdData::SetDate.user",
      __type = {
        name = "CmdData::SetDate"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetGameSpeed = {
      __name = "sol.CmdData::SetGameSpeed.user",
      __type = {
        name = "CmdData::SetGameSpeed"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetLine = {
      __name = "sol.CmdData::SetLine.user",
      __type = {
        name = "CmdData::SetLine"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetName = {
      __name = "sol.CmdData::SetName.user",
      __type = {
        name = "CmdData::SetName"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetNoCosts = {
      __name = "sol.CmdData::SetNoCosts.user",
      __type = {
        name = "CmdData::SetNoCosts"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetTReplaceTerrainownInfo = {
      __name = "sol.CmdData::ReplaceTerrain.user",
      __type = {
        name = "CmdData::ReplaceTerrain"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetTownInfo = {
      __name = "sol.CmdData::ConnectTownsAndIndustries.user",
      __type = {
        name = "CmdData::ConnectTownsAndIndustries"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetUserStopped = {
      __name = "sol.CmdData::SetUserStopped.user",
      __type = {
        name = "CmdData::SetUserStopped"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SetVehicleTargetMaintenanceState = {
      __name = "sol.CmdData::SetVehicleTargetMaintenanceState.user",
      __type = {
        name = "CmdData::SetVehicleTargetMaintenanceState"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ShapeList = {
      __name = "sol.ecs::component::ShapeList.user",
      __type = {
        name = "ecs::component::ShapeList"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Ship = {
      __name = "sol.ecs::component::Ship.user",
      __type = {
        name = "ecs::component::Ship"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ShipInfo = {
      __name = "sol.ecs::ShipMoveSystem::ShipInfo.user",
      __type = {
        name = "ecs::ShipMoveSystem::ShipInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SignalList = {
      __name = "sol.ecs::component::SignalList.user",
      __type = {
        name = "ecs::component::SignalList"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimBuilding = {
      __name = "sol.ecs::component::SimBuilding.user",
      __type = {
        name = "ecs::component::SimBuilding"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimCargo = {
      __name = "sol.ecs::component::SimCargo.user",
      __type = {
        name = "ecs::component::SimCargo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimCargoAtTerminal = {
      __name = "sol.ecs::component::SimCargoAtTerminal.user",
      __type = {
        name = "ecs::component::SimCargoAtTerminal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimEntityAtBuilding = {
      __name = "sol.ecs::component::SimEntityAtBuilding.user",
      __type = {
        name = "ecs::component::SimEntityAtBuilding"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimEntityAtStock = {
      __name = "sol.ecs::component::SimEntityAtStock.user",
      __type = {
        name = "ecs::component::SimEntityAtStock"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimEntityAtTerminal = {
      __name = "sol.ecs::component::SimEntityAtTerminal.user",
      __type = {
        name = "ecs::component::SimEntityAtTerminal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimEntityAtVehicle = {
      __name = "sol.ecs::component::SimEntityAtVehicle.user",
      __type = {
        name = "ecs::component::SimEntityAtVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimEntityIdle = {
      __name = "sol.ecs::component::SimEntityIdle.user",
      __type = {
        name = "ecs::component::SimEntityIdle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimEntityMoving = {
      __name = "sol.ecs::component::SimEntityMoving.user",
      __type = {
        name = "ecs::component::SimEntityMoving"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimPerson = {
      __name = "sol.ecs::component::SimPerson.user",
      __type = {
        name = "ecs::component::SimPerson"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimPersonAtTerminal = {
      __name = "sol.ecs::component::SimPersonAtTerminal.user",
      __type = {
        name = "ecs::component::SimPersonAtTerminal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimPersonAtVehicle = {
      __name = "sol.ecs::component::SimPersonAtVehicle.user",
      __type = {
        name = "ecs::component::SimPersonAtVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimpleProposal = {
      __name = "sol.scripting::Proposal.user",
      __type = {
        name = "scripting::Proposal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SimpleStreetProposal = {
      __name = "sol.scripting::StreetProposal.user",
      __type = {
        name = "scripting::StreetProposal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    SpawnAnimal = {
      __name = "sol.CmdData::SpawnAnimal.user",
      __type = {
        name = "CmdData::SpawnAnimal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Station = {
      __name = "sol.ecs::component::Station.user",
      __type = {
        name = "ecs::component::Station"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    StationGroup = {
      __name = "sol.ecs::component::StationGroup.user",
      __type = {
        name = "ecs::component::StationGroup"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    StreetProposal = {
      __name = "sol.street_util::StreetProposal.user",
      __type = {
        name = "street_util::StreetProposal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    StreetType = {
      __name = "sol.StreetType.user",
      __type = {
        name = "StreetType"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Terrain = {
      __name = "sol.ecs::component::Terrain.user",
      __type = {
        name = "ecs::component::Terrain"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TerrainTile = {
      __name = "sol.ecs::component::TerrainTile.user",
      __type = {
        name = "ecs::component::TerrainTile"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TerrainTileBrush = {
      __name = "sol.ecs::component::TerrainTileBrush.user",
      __type = {
        name = "ecs::component::TerrainTileBrush"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TerrainTileHeightmap = {
      __name = "sol.ecs::component::TerrainTileHeightmap.user",
      __type = {
        name = "ecs::component::TerrainTileHeightmap"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ThinModelInstance = {
      __name = "sol.ThinModelInstance.user",
      __type = {
        name = "ThinModelInstance"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TickEpoch = {
      __name = "sol.ecs::component::TickEpoch.user",
      __type = {
        name = "ecs::component::TickEpoch"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Town = {
      __name = "sol.ecs::component::Town.user",
      __type = {
        name = "ecs::component::Town"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TownBuilding = {
      __name = "sol.ecs::component::TownBuilding.user",
      __type = {
        name = "ecs::component::TownBuilding"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TownConnection = {
      __name = "sol.ecs::component::TownConnection.user",
      __type = {
        name = "ecs::component::TownConnection"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TpNetLink = {
      __name = "sol.ecs::component::TpNetLink.user",
      __type = {
        name = "ecs::component::TpNetLink"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TpNetLinkProposal = {
      __name = "sol.construction_builder_util::TpNetLinkProposal.user",
      __type = {
        name = "construction_builder_util::TpNetLinkProposal"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TrackType = {
      __name = "sol.TrackType.user",
      __type = {
        name = "TrackType"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Train = {
      __name = "sol.ecs::component::Train.user",
      __type = {
        name = "ecs::component::Train"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TrainMoveInfo = {
      __name = "sol.TrainMoveInfo.user",
      __type = {
        name = "TrainMoveInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Tram = {
      __name = "sol.ecs::component::Tram.user",
      __type = {
        name = "ecs::component::Tram"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TransportEdge = {
      __name = "sol.transport::Edge.user",
      __type = {
        name = "transport::Edge"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TransportHistory = {
      __name = "sol.ecs::component::TransportHistory.user",
      __type = {
        name = "ecs::component::TransportHistory"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TransportNetwork = {
      __name = "sol.ecs::component::TransportNetwork.user",
      __type = {
        name = "ecs::component::TransportNetwork"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TransportVehicle = {
      __name = "sol.ecs::component::TransportVehicle.user",
      __type = {
        name = "ecs::component::TransportVehicle"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TransportVehicleConfig = {
      __name = "sol.TransportVehicleConfig.user",
      __type = {
        name = "TransportVehicleConfig"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TransportVehiclePart = {
      __name = "sol.TransportVehiclePart.user",
      __type = {
        name = "TransportVehiclePart"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    TunnelType = {
      __name = "sol.BridgeType.user",
      __type = {
        name = "BridgeType"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    UpdateLine = {
      __name = "sol.CmdData::UpdateLine.user",
      __type = {
        name = "CmdData::UpdateLine"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    Vec2f = {
      __name = "sol.CVec2f.user",
      __type = {
        name = "CVec2f"        is = ()
      }      __eq = (),
      __gc = (),
      __lt = (),
      __pairs = (),
      __tostring = (),
      new = ()
    },
    Vec2i = {
      __name = "sol.CVec2i.user",
      __type = {
        name = "CVec2i"        is = ()
      }      __eq = (),
      __gc = (),
      __lt = (),
      __pairs = (),
      __tostring = (),
      new = ()
    },
    Vec3f = {
      __name = "sol.CVec3f.user",
      __type = {
        name = "CVec3f"        is = ()
      }      __eq = (),
      __gc = (),
      __lt = (),
      __pairs = (),
      __tostring = (),
      new = ()
    },
    Vec4f = {
      __name = "sol.CVec4f.user",
      __type = {
        name = "CVec4f"        is = ()
      }      __eq = (),
      __gc = (),
      __lt = (),
      __pairs = (),
      __tostring = (),
      new = ()
    },
    VehicleDepot = {
      __name = "sol.ecs::component::VehicleDepot.user",
      __type = {
        name = "ecs::component::VehicleDepot"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    VehicleInfo = {
      __name = "sol.ecs::TrainMoveSystem::VehicleInfo.user",
      __type = {
        name = "ecs::TrainMoveSystem::VehicleInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    VehicleOrder = {
      __name = "sol.ecs::component::VehicleOrder.user",
      __type = {
        name = "ecs::component::VehicleOrder"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    VehiclePart = {
      __name = "sol.VehiclePart.user",
      __type = {
        name = "VehiclePart"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    VehiclePartInfo = {
      __name = "sol.ecs::SimPersonAtVehicleSystem::VehiclePartInfo.user",
      __type = {
        name = "ecs::SimPersonAtVehicleSystem::VehiclePartInfo"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    WaterMesh = {
      __name = "sol.ecs::component::WaterMesh.user",
      __type = {
        name = "ecs::component::WaterMesh"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    ["WaterMesh::Contour"] = {
      __name = "sol.ecs::component::WaterMesh::Contour.user",
      __type = {
        name = "ecs::component::WaterMesh::Contour"        is = ()
      }      __eq = (),
      __gc = (),
      __pairs = (),
      new = ()
    },
    transport = {
      Carrier = {  }
    }
  },
  util = {
    proposal = {
      makeProposalData = {
        __doc__ = "(Unknown-type simpleProposal, Unknown-type context) -> Unknown-type"
      }
    },
    terrain = {
      getFastHeightAt = {
        __doc__ = "(Vec2f position) -> Number"
      },
      getHeightAt = {
        __doc__ = "(Vec2f position) -> Number"
      },
      isValidCoordinate = {
        __doc__ = "(Vec2f position) -> Bool"
      }
    },
    usedMemory = {
      __doc__ = "() -> Number"
    }    formatMoney = (),
    formatNumber = (),
    getKeyName = ()
  }
}